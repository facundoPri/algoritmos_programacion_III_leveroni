

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (19 September 2021 23:34:40) as /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/CuisUniversity-4532.image!


Preferences disable: #fullScreenLeavesDeskMargins!

Preferences disable: #fullScreenLeavesDeskMargins!

----End fileIn of /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/Packages/Features/VectorGraphics.pck.st----!

----STARTUP---- (19 September 2021 23:42:59) as /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/CuisUniversity-4532.image!


----End fileIn of /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/Packages/Features/VectorGraphics.pck.st----!

CodePackage subclass: #FileOutReworkPackage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'FileOutRework'!

!classDefinition: #FileOutReworkPackage category: 'FileOutRework' stamp: 'Install-FileOutRework 9/19/2021 23:46:13'!
CodePackage subclass: #FileOutReworkPackage
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'FileOutRework'!

FileOutReworkPackage class
	instanceVariableNames: ''!

!classDefinition: 'FileOutReworkPackage class' category: 'FileOutRework' stamp: 'Install-FileOutRework 9/19/2021 23:46:13'!
FileOutReworkPackage class
	instanceVariableNames: ''!

----End fileIn of /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/FileOutRework.pck.st----!

Preferences disable: #fullScreenLeavesDeskMargins!

----QUIT----(20 September 2021 00:00:54) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (21 November 2021 17:11:40) as /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/CuisUniversity-4532.image!


----End fileIn of /home/facupri/Descargas/TDDGuru-master/TDDGuru.pck.st----!

----End fileIn of /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/grupo/ServiciosFinancieros-Ejercicio.st----!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/21/2021 17:17:29'!
test03Test

	| destinationAccount originAccount aTransference |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	aTransference := Transfer from: originAccount to: destinationAccount for: 100*peso.
	self assert: (aTransference withdrawal) counterparty equals: aTransference deposit.
	self assert: (aTransference deposit) counterparty equals: aTransference withdrawal.
	! !

!methodRemoval: TransferTest #test03 stamp: 'fp 11/21/2021 17:17:29'!
test03

	| destinationAccount originAccount aTransference |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	aTransference := Transfer from: originAccount to: destinationAccount for: 100*peso.
	self assert: (aTransference withdrawal) counterparty equals: aTransference deposit.
	self assert: (aTransference deposit) counterparty equals: aTransference withdrawal.
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/21/2021 17:19:33'!
test04

	| destinationAccount originAccount aTransference |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	aTransference := Transfer from: originAccount to: destinationAccount for: 100*peso.
	self assert: (aTransference withdrawal) counterparty equals: aTransference deposit.
	self assert: (aTransference deposit) counterparty equals: aTransference withdrawal.
	! !

!methodRemoval: TransferTest #test04 stamp: 'fp 11/21/2021 17:20:46'!
test04

	| destinationAccount originAccount aTransference |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	aTransference := Transfer from: originAccount to: destinationAccount for: 100*peso.
	self assert: (aTransference withdrawal) counterparty equals: aTransference deposit.
	self assert: (aTransference deposit) counterparty equals: aTransference withdrawal.
	!

!methodRemoval: TransferTest #test03Test stamp: 'fp 11/21/2021 17:20:53'!
test03Test

	| destinationAccount originAccount aTransference |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	aTransference := Transfer from: originAccount to: destinationAccount for: 100*peso.
	self assert: (aTransference withdrawal) counterparty equals: aTransference deposit.
	self assert: (aTransference deposit) counterparty equals: aTransference withdrawal.
	!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/21/2021 17:21:59'!
test03Test

self assert: true.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/21/2021 17:35:08' prior: 50881105!
test03Test

	| destinationAccount originAccount aTransference |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	aTransference := Transfer from: originAccount to: destinationAccount for: 100*peso.
	self assert: (aTransference withdrawal) counterparty equals: aTransference deposit.
	self assert: (aTransference deposit) counterparty equals: aTransference withdrawal.
	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/21/2021 17:36:38' prior: 50880992!
initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount

	deposit := Deposit register: anAmount on: aDestinationAccount.
	withdrawal:= Withdraw register: anAmount on: anOriginAccount.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/21/2021 17:44:23' prior: 50881126!
initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount

	deposit := Deposit register: anAmount on: aDestinationAccount.
	withdrawal := Withdraw register: anAmount on: anOriginAccount.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/21/2021 17:46:48' prior: 50881136!
initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount

	deposit := Deposit register: anAmount on: aDestinationAccount.
	withdrawal := Withdraw register: anAmount on: anOriginAccount.
	
	deposit setCounterparty: withdrawal.
	withdrawal setCounterparty: deposit.! !
!AccountTransaction methodsFor: 'value' stamp: 'fp 11/21/2021 17:47:35'!
setCounterparty: aCounterparty

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'fp 11/21/2021 17:47:41' overrides: 50881158!
setCounterparty: aCounterparty

	self subclassResponsibility ! !
!Withdraw methodsFor: 'value' stamp: 'fp 11/21/2021 17:47:41' overrides: 50881158!
setCounterparty: aCounterparty

	self subclassResponsibility ! !

!methodRemoval: AccountTransaction #setCounterparty: stamp: 'fp 11/21/2021 17:47:41'!
setCounterparty: aCounterparty

	self subclassResponsibility !
!AccountTransaction methodsFor: 'value' stamp: 'fp 11/21/2021 17:47:50'!
setCounterparty: aCounterparty

	self subclassResponsibility ! !
!Deposit methodsFor: 'value' stamp: 'fp 11/21/2021 17:48:09' prior: 50881163 overrides: 50881177!
setCounterparty: aCounterparty

	counterparty := aCounterparty ! !
!Withdraw methodsFor: 'value' stamp: 'fp 11/21/2021 17:48:18' prior: 50881168 overrides: 50881177!
setCounterparty: aCounterparty

	counterparty := aCounterparty ! !
!Deposit methodsFor: 'value' stamp: 'fp 11/21/2021 17:48:50'!
counterparty

	^counterparty! !
!Withdraw methodsFor: 'value' stamp: 'fp 11/21/2021 17:48:58'!
counterparty

	^counterparty! !
!AccountTransaction methodsFor: 'value' stamp: 'fp 11/21/2021 17:49:06'!
counterparty

	self subclassResponsibility ! !

!testRun: #TransferTest #test03Test stamp: 'fp 11/21/2021 17:49:10'!
ERROR!
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/21/2021 17:49:49'!
withdrawal
	^withdrawal ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/21/2021 17:50:01'!
deposit
	^deposit ! !

!testRun: #TransferTest #test03Test stamp: 'fp 11/21/2021 17:50:04'!
PASSED!

!testRun: #TransferTest #test01DestinationAccountIncreasesBalanceAnOriginAccountDecreasesBalanceOnTransfer stamp: 'fp 11/21/2021 17:50:04'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/21/2021 17:50:04'!
PASSED!

!testRun: #TransferTest #test03Test stamp: 'fp 11/21/2021 17:50:04'!
PASSED!
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/21/2021 17:50:09' prior: 50881212!
deposit

	^deposit ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/21/2021 17:50:12' prior: 50881208!
withdrawal

	^withdrawal ! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/21/2021 17:52:49'!
test03EachLegAnswersItsCounterparty

	| destinationAccount originAccount aTransference |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	aTransference := Transfer from: originAccount to: destinationAccount for: 100*peso.
	self assert: (aTransference withdrawal) counterparty equals: aTransference deposit.
	self assert: (aTransference deposit) counterparty equals: aTransference withdrawal.
	! !

!methodRemoval: TransferTest #test03Test stamp: 'fp 11/21/2021 17:52:49'!
test03Test

	| destinationAccount originAccount aTransference |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	aTransference := Transfer from: originAccount to: destinationAccount for: 100*peso.
	self assert: (aTransference withdrawal) counterparty equals: aTransference deposit.
	self assert: (aTransference deposit) counterparty equals: aTransference withdrawal.
	!

!testRun: #TransferTest #test01DestinationAccountIncreasesBalanceAnOriginAccountDecreasesBalanceOnTransfer stamp: 'fp 11/21/2021 17:53:09'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/21/2021 17:53:09'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/21/2021 17:53:09'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/21/2021 17:53:44' prior: 50881237!
test03EachLegAnswersItsCounterparty

	| destinationAccount originAccount aTransference |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	aTransference := Transfer from: originAccount to: destinationAccount for: 100*peso.
	
	self assert: (aTransference withdrawal) counterparty equals: aTransference deposit.
	self assert: (aTransference deposit) counterparty equals: aTransference withdrawal.
	! !

originAccount := ReceptiveAccount new.
destinationAccount := ReceptiveAccount new.
	
aTransference := Transfer from: originAccount to: destinationAccount for: 100*peso.
!

destinationAccount transactions .!

destinationAccount transactions last.!

destinationAccount transactions last counterparty.!

 a Withdraw !

originAccount := ReceptiveAccount new.
destinationAccount := ReceptiveAccount new.
	
aTransference := Transfer from: originAccount to: destinationAccount for: 100*peso.

counter := destinationAccount transactions last counterparty.
counter!

counter!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/21/2021 17:57:51' prior: 50881280!
test03EachLegAnswersItsCounterparty

	| destinationAccount originAccount aTransference |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	aTransference := Transfer from: originAccount to: destinationAccount for: 100*peso.
	
	self assert: (aTransference withdrawal) counterparty equals: aTransference deposit.
	self assert: (aTransference deposit) counterparty equals: aTransference withdrawal.! !
!ReceptiveAccount methodsFor: 'main protocol' stamp: 'fp 11/21/2021 17:57:53' prior: 50880974!
transactions 

	^ transactions copy! !
!Transfer class methodsFor: 'instance creation' stamp: 'fp 11/21/2021 17:59:05' prior: 50881009!
from: anOriginAccount to: aDestinationAccount for: anAmount

 	(anAmount < 0) ifTrue:[
		self error: self negativeAmountErrorDescription.
	].
	
	^self new initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount! !

10 - (10 *peso)!

10 - (10 *peso)!

10 - (10 *peso).!

(10 * peso) - 10!

(10 * peso) * peso!
!Transfer class methodsFor: 'instance creation' stamp: 'fp 11/21/2021 18:01:51' prior: 50881337!
from: anOriginAccount to: aDestinationAccount for: anAmount

 	(anAmount < 0) ifTrue:[
		self error: self negativeAmountErrorDescription.
	].
	
	^self new initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount! !
!Transfer class methodsFor: 'instance creation' stamp: 'fp 11/21/2021 18:02:02' prior: 50881351!
from: anOriginAccount to: aDestinationAccount for: anAmount

 	(anAmount < 0) ifTrue:[
		self error: self negativeAmountErrorDescription.
	].
	
	^self new initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount! !

(10 * peso)!

(10 * peso) class!

(10 * peso) class!

(10 * peso)!

peso!

(10 * peso) unit!

(10 * peso) unit == peso!

(10 * peso) unit == dollar!

(10 * peso) unit == peso!
!Transfer class methodsFor: 'instance creation' stamp: 'fp 11/21/2021 18:04:54' prior: 50881362!
from: anOriginAccount to: aDestinationAccount for: anAmount

 	(anAmount < 0) ifTrue:[
		self error: self negativeAmountErrorDescription.
	].
	
	^self new initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount! !

Deposit for: 100 * dollar.!

 a Deposit !


	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100 * peso.
	withdraw := Withdraw for: 50 * dollar.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered: withdraw).
!


	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100 * peso.
	withdraw := Withdraw for: 50 * dollar.
		
	account hasRegistered: deposit.
	account hasRegistered: withdraw.
account.!

account!

	account := ReceptiveAccount  new.
	Deposit register: 100 * peso on: account.
	Deposit register: 100 * dollar on: account.
	Withdraw register: 100 * peso on: account.
	Withdraw register: 100 * dollar on: account.
	account.
	account balance .!

account!

	account := ReceptiveAccount  new.
	Deposit register: 100 * peso on: account.
	Deposit register: 100 * dollar on: account.
	Withdraw register: 50 * peso on: account.
	Withdraw register: 100 * dollar on: account.
	account.
	account balance .!

	account := ReceptiveAccount  new.
	Deposit register: 100 * peso on: account.
	Deposit register: 100 * dollar on: account.
	Withdraw register: 50 * peso on: account.
	Withdraw register: 50 * dollar on: account.
	account.
	account balance .!
!Withdraw methodsFor: 'value' stamp: 'fp 11/21/2021 18:11:41'!
transactionValue

	^ value negated! !
!Deposit methodsFor: 'value' stamp: 'fp 11/21/2021 18:11:50'!
transactionValue

	^ value! !
!ReceptiveAccount methodsFor: 'main protocol' stamp: 'fp 11/21/2021 18:12:06' prior: 50880954!
balance
	
	^transactions sum: [ :aTransaction | 
		
			aTransaction transactionValue 

	] ifEmpty:[0]
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/21/2021 18:12:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/21/2021 18:12:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/21/2021 18:12:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/21/2021 18:12:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/21/2021 18:12:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/21/2021 18:12:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/21/2021 18:12:08'!
PASSED!
!ReceptiveAccount methodsFor: 'main protocol' stamp: 'fp 11/21/2021 18:12:16' prior: 50881433!
balance
	
	^transactions sum: [ :aTransaction | 
			aTransaction transactionValue 
	] ifEmpty:[0]
	! !
!AccountTransaction methodsFor: 'value' stamp: 'fp 11/21/2021 18:13:33'!
defineCounterparty: aCounterparty

	self subclassResponsibility ! !
!Withdraw methodsFor: 'value' stamp: 'fp 11/21/2021 18:13:33' overrides: 50881472!
defineCounterparty: aCounterparty

	counterparty := aCounterparty ! !
!Deposit methodsFor: 'value' stamp: 'fp 11/21/2021 18:13:33' overrides: 50881472!
defineCounterparty: aCounterparty

	counterparty := aCounterparty ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/21/2021 18:13:33' prior: 50881146!
initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount

	deposit := Deposit register: anAmount on: aDestinationAccount.
	withdrawal := Withdraw register: anAmount on: anOriginAccount.
	
	deposit defineCounterparty: withdrawal.
	withdrawal defineCounterparty: deposit.! !

!methodRemoval: AccountTransaction #setCounterparty: stamp: 'fp 11/21/2021 18:13:33'!
setCounterparty: aCounterparty

	self subclassResponsibility !

!methodRemoval: Withdraw #setCounterparty: stamp: 'fp 11/21/2021 18:13:33'!
setCounterparty: aCounterparty

	counterparty := aCounterparty !

!methodRemoval: Deposit #setCounterparty: stamp: 'fp 11/21/2021 18:13:33'!
setCounterparty: aCounterparty

	counterparty := aCounterparty !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/21/2021 18:13:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/21/2021 18:13:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/21/2021 18:13:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/21/2021 18:13:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/21/2021 18:13:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/21/2021 18:13:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/21/2021 18:13:38'!
PASSED!

!testRun: #TransferTest #test01DestinationAccountIncreasesBalanceAnOriginAccountDecreasesBalanceOnTransfer stamp: 'fp 11/21/2021 18:13:56'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/21/2021 18:13:56'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/21/2021 18:13:56'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/21/2021 18:14:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/21/2021 18:14:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/21/2021 18:14:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/21/2021 18:14:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/21/2021 18:14:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/21/2021 18:14:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/21/2021 18:14:03'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/21/2021 18:26:35' prior: 50880779!
test01DestinationAccountIncreasesBalanceAnOriginAccountDecreasesBalanceOnTransfer

	| destinationAccount originAccount |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	Transfer from: originAccount to: destinationAccount for: 100*peso.
	
	self assert: originAccount balance equals: -100 * peso.
	self assert: destinationAccount balance equals: 100 * peso.! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/21/2021 18:26:41' prior: 50881578!
test01DestinationAccountIncreasesBalanceAnOriginAccountDecreasesBalanceOnTransfer

	| destinationAccount originAccount |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	Transfer from: originAccount to: destinationAccount for: 100 * peso.
	
	self assert: originAccount balance equals: -100 * peso.
	self assert: destinationAccount balance equals: 100 * peso.! !

----QUIT----(21 November 2021 18:37:24) CuisUniversity-4532.image priorSource: 17319451!

----STARTUP---- (23 November 2021 18:18:27) as /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/CuisUniversity-4532.image!


!testRun: #TransferTest #test01DestinationAccountIncreasesBalanceAnOriginAccountDecreasesBalanceOnTransfer stamp: 'fp 11/23/2021 18:42:31'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/23/2021 18:42:31'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/23/2021 18:42:31'!
PASSED!
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 18:43:25' prior: 50881488!
initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount

	"
	deposit := Deposit register: anAmount on: aDestinationAccount.
	withdrawal := Withdraw register: anAmount on: anOriginAccount.
	
	deposit defineCounterparty: withdrawal.
	withdrawal defineCounterparty: deposit.
	"
! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 18:44:13' prior: 50881629!
initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount

	
	deposit := Deposit register: anAmount on: aDestinationAccount.
	withdrawal := Withdraw register: anAmount on: anOriginAccount.
	
	deposit defineCounterparty: withdrawal.
	withdrawal defineCounterparty: deposit.
	

	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 18:44:22' prior: 50881642!
initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount

	deposit := Deposit register: anAmount on: aDestinationAccount.
	withdrawal := Withdraw register: anAmount on: anOriginAccount.
	
	deposit defineCounterparty: withdrawal.
	withdrawal defineCounterparty: deposit.
	

	! !
!AccountTransaction methodsFor: 'value' stamp: 'fp 11/23/2021 18:55:24'!
transactionValue

	self subclassResponsibility ! !

!methodRemoval: AccountTransaction #defineCounterparty: stamp: 'fp 11/23/2021 18:55:33'!
defineCounterparty: aCounterparty

	self subclassResponsibility !

!methodRemoval: AccountTransaction #counterparty stamp: 'fp 11/23/2021 18:55:40'!
counterparty

	self subclassResponsibility !

AccountTransaction subclass: #LegWithdrawal
	instanceVariableNames: 'value counterparty'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #LegWithdrawal category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/23/2021 18:56:29'!
AccountTransaction subclass: #LegWithdrawal
	instanceVariableNames: 'value counterparty'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

LegWithdrawal class
	instanceVariableNames: ''!

!classDefinition: 'LegWithdrawal class' category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/23/2021 18:56:29'!
LegWithdrawal class
	instanceVariableNames: ''!
!LegWithdrawal methodsFor: 'initialization' stamp: 'fp 11/23/2021 18:56:29'!
initializeFor: aValue

	value := aValue ! !
!LegWithdrawal methodsFor: 'value' stamp: 'fp 11/23/2021 18:56:29'!
counterparty

	^counterparty! !
!LegWithdrawal methodsFor: 'value' stamp: 'fp 11/23/2021 18:56:29'!
defineCounterparty: aCounterparty

	counterparty := aCounterparty ! !
!LegWithdrawal methodsFor: 'value' stamp: 'fp 11/23/2021 18:56:29' overrides: 50881667!
transactionValue

	^ value negated! !
!LegWithdrawal methodsFor: 'value' stamp: 'fp 11/23/2021 18:56:29' overrides: 50880843!
value

	^ value! !
!LegWithdrawal class methodsFor: 'instance creation' stamp: 'fp 11/23/2021 18:56:29'!
for: aValue

	^ self new initializeFor: aValue ! !

AccountTransaction subclass: #LegDeposit
	instanceVariableNames: 'value counterparty'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #LegDeposit category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/23/2021 18:56:41'!
AccountTransaction subclass: #LegDeposit
	instanceVariableNames: 'value counterparty'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

LegDeposit class
	instanceVariableNames: ''!

!classDefinition: 'LegDeposit class' category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/23/2021 18:56:41'!
LegDeposit class
	instanceVariableNames: ''!
!LegDeposit methodsFor: 'initialization' stamp: 'fp 11/23/2021 18:56:41'!
initializeFor: aValue

	value := aValue ! !
!LegDeposit methodsFor: 'value' stamp: 'fp 11/23/2021 18:56:41'!
counterparty

	^counterparty! !
!LegDeposit methodsFor: 'value' stamp: 'fp 11/23/2021 18:56:41'!
defineCounterparty: aCounterparty

	counterparty := aCounterparty ! !
!LegDeposit methodsFor: 'value' stamp: 'fp 11/23/2021 18:56:41' overrides: 50881667!
transactionValue

	^ value! !
!LegDeposit methodsFor: 'value' stamp: 'fp 11/23/2021 18:56:41' overrides: 50880843!
value

	^ value! !
!LegDeposit class methodsFor: 'instance creation' stamp: 'fp 11/23/2021 18:56:41'!
for: aValue

	^ self new initializeFor: aValue ! !

!methodRemoval: Deposit #counterparty stamp: 'fp 11/23/2021 18:57:11'!
counterparty

	^counterparty!

!methodRemoval: Deposit #defineCounterparty: stamp: 'fp 11/23/2021 18:57:14'!
defineCounterparty: aCounterparty

	counterparty := aCounterparty !

!methodRemoval: Withdraw #counterparty stamp: 'fp 11/23/2021 18:57:20'!
counterparty

	^counterparty!

!methodRemoval: Withdraw #defineCounterparty: stamp: 'fp 11/23/2021 18:57:23'!
defineCounterparty: aCounterparty

	counterparty := aCounterparty !
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 18:57:55' prior: 50881655!
initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount

	deposit := LegDeposit register: anAmount on: aDestinationAccount.
	withdrawal := LegWithdrawal register: anAmount on: anOriginAccount.
	
	deposit defineCounterparty: withdrawal.
	withdrawal defineCounterparty: deposit.
	

	! !

!testRun: #TransferTest #test01DestinationAccountIncreasesBalanceAnOriginAccountDecreasesBalanceOnTransfer stamp: 'fp 11/23/2021 18:58:00'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/23/2021 18:58:00'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/23/2021 18:58:00'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/23/2021 18:59:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/23/2021 18:59:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/23/2021 18:59:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/23/2021 18:59:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/23/2021 18:59:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/23/2021 18:59:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/23/2021 18:59:37'!
PASSED!

!classRenamed: #LegDeposit as: #DepositLeg stamp: 'fp 11/23/2021 19:01:27'!
Smalltalk renameClassNamed: #LegDeposit as: #DepositLeg!
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:01:28' prior: 50881790!
initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount

	deposit := DepositLeg register: anAmount on: aDestinationAccount.
	withdrawal := LegWithdrawal register: anAmount on: anOriginAccount.
	
	deposit defineCounterparty: withdrawal.
	withdrawal defineCounterparty: deposit.
	

	! !

!classRenamed: #LegWithdrawal as: #WithdrawalLeg stamp: 'fp 11/23/2021 19:01:54'!
Smalltalk renameClassNamed: #LegWithdrawal as: #WithdrawalLeg!
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:01:54' prior: 50881844!
initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount

	deposit := DepositLeg register: anAmount on: aDestinationAccount.
	withdrawal := WithdrawalLeg register: anAmount on: anOriginAccount.
	
	deposit defineCounterparty: withdrawal.
	withdrawal defineCounterparty: deposit.
	

	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:02:11'!
depositLeg

	^deposit ! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:02:11' prior: 50881315!
test03EachLegAnswersItsCounterparty

	| destinationAccount originAccount aTransference |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	aTransference := Transfer from: originAccount to: destinationAccount for: 100*peso.
	
	self assert: (aTransference withdrawal) counterparty equals: aTransference depositLeg.
	self assert: (aTransference depositLeg) counterparty equals: aTransference withdrawal.! !

!methodRemoval: Transfer #deposit stamp: 'fp 11/23/2021 19:02:11'!
deposit

	^deposit !
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:02:33'!
withdrawalLeg

	^withdrawal ! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:02:33' prior: 50881877!
test03EachLegAnswersItsCounterparty

	| destinationAccount originAccount aTransference |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	aTransference := Transfer from: originAccount to: destinationAccount for: 100*peso.
	
	self assert: (aTransference withdrawalLeg) counterparty equals: aTransference depositLeg.
	self assert: (aTransference depositLeg) counterparty equals: aTransference withdrawalLeg.! !

!methodRemoval: Transfer #withdrawal stamp: 'fp 11/23/2021 19:02:33'!
withdrawal

	^withdrawal !

!classDefinition: #Transfer category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/23/2021 19:02:41'!
Object subclass: #Transfer
	instanceVariableNames: 'depositLeg withdrawal'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:02:41' prior: 50881873!
depositLeg

	^depositLeg ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:02:41' prior: 50881861!
initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount

	depositLeg := DepositLeg register: anAmount on: aDestinationAccount.
	withdrawal := WithdrawalLeg register: anAmount on: anOriginAccount.
	
	depositLeg defineCounterparty: withdrawal.
	withdrawal defineCounterparty: depositLeg.
	

	! !

!classDefinition: #Transfer category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/23/2021 19:02:46'!
Object subclass: #Transfer
	instanceVariableNames: 'depositLeg withdrawalLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:02:46' prior: 50881934!
initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount

	depositLeg := DepositLeg register: anAmount on: aDestinationAccount.
	withdrawalLeg := WithdrawalLeg register: anAmount on: anOriginAccount.
	
	depositLeg defineCounterparty: withdrawalLeg.
	withdrawalLeg defineCounterparty: depositLeg.
	

	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:02:46' prior: 50881896!
withdrawalLeg

	^withdrawalLeg ! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #PortfolioTest category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/23/2021 19:07:05'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #Portfolio category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/23/2021 19:07:25'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!PortfolioTest methodsFor: 'no messages' stamp: 'fp 11/23/2021 19:12:06'!
test01EmptyPortfolioHasBalanceOfZero

	| portfolio |
	portfolio := Portfolio new.
	
	self assert: 0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/23/2021 19:13:05'!
ERROR!
!Portfolio methodsFor: 'no messages' stamp: 'fp 11/23/2021 19:13:22'!
balance
	
	^0! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/23/2021 19:13:25'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/23/2021 19:13:25'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/23/2021 19:14:57'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/23/2021 19:14:57'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:26:21'!
test02WhenPorfolioHasOneAccountBothBalanceAreTheSame

	| portfolio account |
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 * peso on: account.
	portfolio addAccount: account.
	
	self assert: 100 * peso equals: portfolio balance.! !

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/23/2021 19:26:28'!
ERROR!
!Portfolio methodsFor: 'associating' stamp: 'fp 11/23/2021 19:27:01'!
addAccount: aReceptiveAccount 
	self shouldBeImplemented.! !

!classDefinition: #Portfolio category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/23/2021 19:27:50'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!Portfolio methodsFor: 'associating' stamp: 'fp 11/23/2021 19:27:47' prior: 50882040!
addAccount: aReceptiveAccount 
	accounts := aReceptiveAccount.! !

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/23/2021 19:27:56'!
FAILURE!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/23/2021 19:28:09'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/23/2021 19:28:09'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/23/2021 19:28:09'!
FAILURE!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/23/2021 19:28:09'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:31:04' prior: 50882008!
balance
	
	^accounts balance.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/23/2021 19:31:05'!
ERROR!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/23/2021 19:31:05'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/23/2021 19:31:05'!
ERROR!

	account !

	account ifTrue:['hello']!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:35:18' prior: 50882077!
balance
	
	^accounts ifNotNil:[^accounts balance] ifNil:[0].! !

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/23/2021 19:35:39'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/23/2021 19:35:39'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/23/2021 19:35:39'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:37:37'!
test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances


	| portfolio account |
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 * peso on: account.
	portfolio addAccount: account.
	
	self assert: 100 * peso equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:37:51' prior: 50882109!
test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances

	| portfolio account |
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	Deposit register: 100 * peso on: account.
	portfolio addAccount: account.
	
	self assert: 100 * peso equals: portfolio balance.! !

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/23/2021 19:37:53'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/23/2021 19:37:53'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/23/2021 19:37:53'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/23/2021 19:37:53'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:39:56' prior: 50882122!
test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances

	| portfolio account1 account2 |
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 * peso on: account1.
	Deposit register: 50 * peso on: account2.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	self assert: 100 * peso equals: portfolio balance.! !

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/23/2021 19:40:06'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:40:16' prior: 50882150!
test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances

	| portfolio account1 account2 |
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	Deposit register: 100 * peso on: account1.
	Deposit register: 50 * peso on: account2.
	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	self assert: 150 * peso equals: portfolio balance.! !

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/23/2021 19:40:20'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 19:41:38' overrides: 16896425!
initialize
	
	accounts := OrderedCollection new.! !
!Portfolio methodsFor: 'associating' stamp: 'fp 11/23/2021 19:43:23' prior: 50882053!
addAccount: aReceptiveAccount 
	accounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'main protocol' stamp: 'fp 11/23/2021 19:45:29' prior: 50882093!
balance

 	^accounts sum: [ :anAccount | 
			anAccount balance. 
	] ifEmpty:[0]! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/23/2021 19:45:36'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/23/2021 19:45:36'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/23/2021 19:45:36'!
PASSED!


portfolio := Portfolio new.
portfolio2 := Portfolio new.
account1 := ReceptiveAccount new.
account2 := ReceptiveAccount new.
account3 := ReceptiveAccount new.
Deposit register: 100 * peso on: account1.
Deposit register: 50 * peso on: account2.
Deposit register: 150 * peso on: account3.
portfolio addAccount: account1.
portfolio addAccount: account2.

portfolio2 addAccount: portfolio.
portfolio2 addAccount: account3.!

portfolio2 balance !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 20:13:04'!
test04ATransactionRegisteredOnAnAccountInPortfolioIsFound

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 * peso on: account.

	portfolio addAccount: account.

	self assert: (portfolio hasRegistered: deposit).! !

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/23/2021 20:13:08'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'fp 11/23/2021 20:14:01'!
hasRegister: aTransaction
	
	^ true! !

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/23/2021 20:14:03'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'fp 11/23/2021 20:14:22'!
hasRegistered: aTransaction
	
	^ true! !

!methodRemoval: Portfolio #hasRegister: stamp: 'fp 11/23/2021 20:14:31'!
hasRegister: aTransaction
	
	^ true!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 20:14:36' prior: 50882233!
test04ATransactionRegisteredOnAnAccountInPortfolioIsFound

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 * peso on: account.

	portfolio addAccount: account.

	self assert: (portfolio hasRegistered: deposit).! !

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/23/2021 20:14:36'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/23/2021 20:14:36'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/23/2021 20:14:36'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/23/2021 20:14:36'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/23/2021 20:14:36'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 20:17:19' prior: 50882265!
test04ATransactionRegisteredOnAnAccountInPortfolioIsFound

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 100 * peso on: account.

	portfolio addAccount: account.

	self assert: (portfolio hasRegistered: deposit).
	! !

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/23/2021 20:17:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/23/2021 20:17:20'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/23/2021 20:17:20'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/23/2021 20:17:20'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/23/2021 20:17:20'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 20:23:35'!
test05PortfolioCantFindTransactionNotRegistered

	| portfolio account deposit |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	deposit := Deposit for: 100 * peso.

	portfolio addAccount: account.

	self deny: (portfolio hasRegistered: deposit).
	! !

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/23/2021 20:23:35'!
FAILURE!
!Portfolio methodsFor: 'initialization' stamp: 'fp 11/23/2021 20:25:37' prior: 50882257!
hasRegistered: aTransaction
	
	^accounts detect:[:anAccount|
		anAccount hasRegistered: aTransaction.
	]! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/23/2021 20:25:38'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/23/2021 20:25:38'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/23/2021 20:25:38'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/23/2021 20:25:38'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/23/2021 20:25:38'!
ERROR!
!Portfolio methodsFor: 'initialization' stamp: 'fp 11/23/2021 20:26:13' prior: 50882344!
hasRegistered: aTransaction
	
	^accounts anySatisfy: [:anAccount|
		anAccount hasRegistered: aTransaction.
	]! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/23/2021 20:26:14'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/23/2021 20:26:14'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/23/2021 20:26:14'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/23/2021 20:26:14'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/23/2021 20:26:14'!
PASSED!

#() anySatisfy: []!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/23/2021 20:37:51'!
test06PortfolioCanReturnTheTransactionsOfOneOfItsAccounts

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	Withdraw register: 50 * peso on: account.

	portfolio addAccount: account.

	self assert: account transactions equals: (portfolio transactionsOf: account).! !

!testRun: #PortfolioTest #test06PortfolioCanReturnTheTransactionsOfOneOfItsAccounts stamp: 'fp 11/23/2021 20:38:07'!
ERROR!
!Portfolio methodsFor: 'main protocol' stamp: 'fp 11/23/2021 20:38:26'!
transactionsOf: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'main protocol' stamp: 'fp 11/23/2021 20:39:02' prior: 50882414!
transactionsOf: aReceptiveAccount 
	^aReceptiveAccount transactions! !

!testRun: #PortfolioTest #test06PortfolioCanReturnTheTransactionsOfOneOfItsAccounts stamp: 'fp 11/23/2021 20:39:15'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/23/2021 20:39:15'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/23/2021 20:39:15'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/23/2021 20:39:15'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/23/2021 20:39:15'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/23/2021 20:39:15'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnTheTransactionsOfOneOfItsAccounts stamp: 'fp 11/23/2021 20:39:15'!
PASSED!

----QUIT----(23 November 2021 20:48:24) CuisUniversity-4532.image priorSource: 17598672!

----STARTUP---- (24 November 2021 17:26:25) as /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/CuisUniversity-4532.image!

!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/24/2021 17:38:13'!
test07

	| portfolio account previousPortfolioBalance |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	portfolio addAccount: account.
	
	previousPortfolioBalance := portfolio balance

	self
		should: [	portfolio addAccount: account.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Transfer accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio balance.
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/24/2021 17:38:23' prior: 50882459!
test07

	| portfolio account previousPortfolioBalance |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	portfolio addAccount: account.
	
	previousPortfolioBalance := portfolio balance.

	self
		should: [	portfolio addAccount: account.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Transfer accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio balance.
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/24/2021 17:39:06'!
test07PortofioCantAddSameAccountTwice

	| portfolio account previousPortfolioBalance |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	portfolio addAccount: account.
	
	previousPortfolioBalance := portfolio balance.

	self
		should: [	portfolio addAccount: account.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Transfer accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio balance.
		].! !

!methodRemoval: PortfolioTest #test07 stamp: 'fp 11/24/2021 17:39:06'!
test07

	| portfolio account previousPortfolioBalance |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	portfolio addAccount: account.
	
	previousPortfolioBalance := portfolio balance.

	self
		should: [	portfolio addAccount: account.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Transfer accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio balance.
		].!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/24/2021 17:40:02' prior: 50882499!
test07PortofioCantAddSameAccountTwice

	| portfolio account previousPortfolioBalance |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	portfolio addAccount: account.
	
	previousPortfolioBalance := portfolio balance.

	self
		should: [	portfolio addAccount: account.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio balance.
		].! !
!Portfolio class methodsFor: 'no messages' stamp: 'fp 11/24/2021 17:40:45'!
accountAlreadyRegisteredErrorDescription

	^'Account already registered'! !

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/24/2021 17:40:55'!
FAILURE!

----End fileIn of /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/Packages/TerseGuide.pck.st----!

#(5) includes: 5!

#(5) includes: 2!
!Portfolio methodsFor: 'associating' stamp: 'fp 11/24/2021 17:44:51' prior: 50882197!
addAccount: aReceptiveAccount 
	(accounts includes: aReceptiveAccount) ifTrue:[self error: self class accountAlreadyRegisteredErrorDescription].
	accounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'associating' stamp: 'fp 11/24/2021 17:44:58' prior: 50885497!
addAccount: aReceptiveAccount 
	(accounts includes: aReceptiveAccount) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/24/2021 17:45:00'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/24/2021 17:45:00'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/24/2021 17:45:00'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/24/2021 17:45:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/24/2021 17:45:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnTheTransactionsOfOneOfItsAccounts stamp: 'fp 11/24/2021 17:45:00'!
PASSED!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/24/2021 17:45:00'!
PASSED!
!Portfolio methodsFor: 'associating' stamp: 'fp 11/24/2021 17:45:09' prior: 50885506!
addAccount: aReceptiveAccount 

	(accounts includes: aReceptiveAccount) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/24/2021 17:45:14'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/24/2021 17:45:14'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/24/2021 17:45:14'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/24/2021 17:45:14'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/24/2021 17:45:14'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/24/2021 17:45:14'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnTheTransactionsOfOneOfItsAccounts stamp: 'fp 11/24/2021 17:45:14'!
PASSED!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/24/2021 17:45:14'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/24/2021 17:51:48'!
test08

	| account previousPortfolioBalance portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.	
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	portfolio2 addAccount: account.
	portfolio1 addAccount: portfolio2.
	
	previousPortfolioBalance := portfolio1 balance.

	self
		should: [	portfolio1 addAccount: account.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio1 balance.
		].! !

!testRun: #PortfolioTest #test08 stamp: 'fp 11/24/2021 17:51:55'!
FAILURE!
!Portfolio methodsFor: 'associating' stamp: 'fp 11/24/2021 17:56:50' prior: 50885541!
addAccount: aReceptiveAccount 

	(accounts includes: aReceptiveAccount) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	accounts do: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue:[
			(anAccount hasAccount: aReceptiveAccount) ifTrue:[
				self error: self class accountAlreadyRegisteredErrorDescription
			]
		]
	].

	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/24/2021 17:56:53'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/24/2021 17:56:53'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/24/2021 17:56:53'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/24/2021 17:56:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/24/2021 17:56:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnTheTransactionsOfOneOfItsAccounts stamp: 'fp 11/24/2021 17:56:53'!
PASSED!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/24/2021 17:56:53'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'fp 11/24/2021 17:56:53'!
ERROR!

!testRun: #PortfolioTest #test08 stamp: 'fp 11/24/2021 17:56:53'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'fp 11/24/2021 17:57:26'!
hasAccount: aReceptiveAccount 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'private' stamp: 'fp 11/24/2021 17:57:50' prior: 50885650!
hasAccount: aReceptiveAccount 
	^true! !

!testRun: #PortfolioTest #test08 stamp: 'fp 11/24/2021 17:57:55'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'fp 11/24/2021 17:57:59'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/24/2021 17:57:59'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/24/2021 17:57:59'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/24/2021 17:57:59'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/24/2021 17:57:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/24/2021 17:57:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnTheTransactionsOfOneOfItsAccounts stamp: 'fp 11/24/2021 17:57:59'!
PASSED!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/24/2021 17:57:59'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'fp 11/24/2021 17:57:59'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/24/2021 17:58:53'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/24/2021 17:58:53'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/24/2021 17:58:53'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/24/2021 17:58:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/24/2021 17:58:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnTheTransactionsOfOneOfItsAccounts stamp: 'fp 11/24/2021 17:58:53'!
PASSED!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/24/2021 17:58:53'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'fp 11/24/2021 17:58:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/24/2021 17:58:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/24/2021 17:58:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/24/2021 17:58:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/24/2021 17:58:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/24/2021 17:58:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/24/2021 17:58:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/24/2021 17:58:53'!
PASSED!

!testRun: #TransferTest #test01DestinationAccountIncreasesBalanceAnOriginAccountDecreasesBalanceOnTransfer stamp: 'fp 11/24/2021 17:58:53'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/24/2021 17:58:53'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/24/2021 17:58:53'!
PASSED!


portfolio := Portfolio new.
portfolio2 := Portfolio new.

portfolio2 addAccount: portfolio.

!

portfolio2 addAccount: portfolio.!


portfolio := Portfolio new.
portfolio2 := Portfolio new.

portfolio2 addAccount: portfolio.

!


portfolio := Portfolio new.
portfolio2 := Portfolio new.

portfolio2 addAccount: portfolio.

!

portfolio2 addAccount: portfolio.!


portfolio := Portfolio new.
portfolio2 := Portfolio new.

portfolio2 addAccount: portfolio.

!

portfolio := Portfolio new.
portfolio2 := Portfolio new.!

portfolio2 addAccount: portfolio.!

portfolio := Portfolio new.
portfolio2 := Portfolio new.!

portfolio isKindOf: Portfolio!

portfolio := Portfolio new.
portfolio2 := Portfolio new.
!

portfolio := Portfolio new.
portfolio2 := Portfolio new.
portfolio3 := Portfolio new.

portfolio addAccount: portfolio2.
portfolio addAccount: portfolio3.

!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/24/2021 18:11:43'!
test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios

	| account previousPortfolioBalance portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.	
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	portfolio2 addAccount: account.
	portfolio1 addAccount: portfolio2.
	
	previousPortfolioBalance := portfolio1 balance.

	self
		should: [	portfolio1 addAccount: account.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio1 balance.
		].! !

!methodRemoval: PortfolioTest #test08 stamp: 'fp 11/24/2021 18:11:43'!
test08

	| account previousPortfolioBalance portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.	
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	portfolio2 addAccount: account.
	portfolio1 addAccount: portfolio2.
	
	previousPortfolioBalance := portfolio1 balance.

	self
		should: [	portfolio1 addAccount: account.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio1 balance.
		].!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/24/2021 18:17:32'!
test09PortfolioCanAddMoreThanOnePorfolio

	| portfolio1 portfolio2 account1 account2 portfolio |
	
	portfolio := Portfolio new.	
	portfolio1 := Portfolio new.	
	portfolio2 := Portfolio new.
	
	portfolio addAccount: portfolio1.
	portfolio addAccount: portfolio2.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 50 * peso on: account1.
	Deposit register: 100 * peso on: account2.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	self assert: 150 * peso equals: portfolio balance.! !

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/24/2021 18:17:42'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'fp 11/24/2021 18:18:15' prior: 50885655!
hasAccount: aReceptiveAccount 
	^accounts includes: aReceptiveAccount.! !
!Portfolio methodsFor: 'associating' stamp: 'fp 11/24/2021 18:18:37' prior: 50885604!
addAccount: aReceptiveAccount 

	(self hasAccount: aReceptiveAccount) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	accounts do: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue:[
			(anAccount hasAccount: aReceptiveAccount) ifTrue:[
				self error: self class accountAlreadyRegisteredErrorDescription
			]
		]
	].

	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/24/2021 18:18:42'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/24/2021 18:18:42'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/24/2021 18:18:42'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/24/2021 18:18:42'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/24/2021 18:18:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/24/2021 18:18:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnTheTransactionsOfOneOfItsAccounts stamp: 'fp 11/24/2021 18:18:42'!
PASSED!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/24/2021 18:18:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/24/2021 18:18:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/24/2021 18:18:42'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'fp 11/24/2021 18:18:53' prior: 50885856!
hasAccount: aReceptiveAccount 

	^accounts includes: aReceptiveAccount.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/24/2021 18:22:04'!
test10PortfolioCantIncludeItSelf

	| portfolio |
	
	portfolio := Portfolio new.	
	
	portfolio addAccount: portfolio.
	
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/24/2021 18:24:26' prior: 50885918!
test10PortfolioCantIncludeItSelf

	| portfolio |
	
	portfolio := Portfolio new.	
	
	self
		should: [	portfolio addAccount: portfolio.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio invalidPortfolioErrorDescription.
		].! !

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/24/2021 18:24:35'!
FAILURE!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'fp 11/24/2021 18:25:30'!
invalidPortfolioErrorDescription

	^'Invalid portfolio'! !

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/24/2021 18:25:35'!
FAILURE!

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/24/2021 18:26:14'!
FAILURE!
!Portfolio methodsFor: 'associating' stamp: 'fp 11/24/2021 18:27:26' prior: 50885861!
addAccount: aReceptiveAccount 

	(self hasAccount: aReceptiveAccount) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	accounts do: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue:[
			(anAccount hasAccount: aReceptiveAccount) ifTrue:[
				self error: self class accountAlreadyRegisteredErrorDescription
			]
		]
	].

	(self = aReceptiveAccount) ifTrue:[
		self error: self class invalidPortfolioErrorDescription 
	].

	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/24/2021 18:27:27'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/24/2021 18:27:27'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/24/2021 18:27:27'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/24/2021 18:27:27'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/24/2021 18:27:27'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/24/2021 18:27:27'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnTheTransactionsOfOneOfItsAccounts stamp: 'fp 11/24/2021 18:27:27'!
PASSED!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/24/2021 18:27:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/24/2021 18:27:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/24/2021 18:27:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/24/2021 18:27:27'!
PASSED!
!Portfolio methodsFor: 'associating' stamp: 'fp 11/24/2021 18:29:05' prior: 50885952!
addAccount: aReceptiveAccount 

	(self hasAccount: aReceptiveAccount) ifTrue: [
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	accounts do: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue: [
			(anAccount hasAccount: aReceptiveAccount) ifTrue:[
				self error: self class accountAlreadyRegisteredErrorDescription
			]
		]
	].

	(self = aReceptiveAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].

	accounts add: aReceptiveAccount.! !

----QUIT----(24 November 2021 18:38:19) CuisUniversity-4532.image priorSource: 17625601!

----STARTUP---- (25 November 2021 20:26:54) as /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/CuisUniversity-4532.image!

!ReceptiveAccount methodsFor: 'main protocol' stamp: 'fp 11/25/2021 20:39:26' prior: 50880969!
register: aTransaction

	transactions add: aTransaction.
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/25/2021 20:44:28'!
test06PortfolioCanReturnAllItsTransactions

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	Withdraw register: 50 * peso on: account.

	portfolio addAccount: account.

	self assert: account transactions equals: (portfolio transactionsOf: account).! !

!methodRemoval: PortfolioTest #test06PortfolioCanReturnTheTransactionsOfOneOfItsAccounts stamp: 'fp 11/25/2021 20:44:28'!
test06PortfolioCanReturnTheTransactionsOfOneOfItsAccounts

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	Withdraw register: 50 * peso on: account.

	portfolio addAccount: account.

	self assert: account transactions equals: (portfolio transactionsOf: account).!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/25/2021 20:45:34' prior: 50886043!
test06PortfolioCanReturnAllItsTransactions

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	Withdraw register: 50 * peso on: account.

	portfolio addAccount: account.

	self assert: account transactions equals: (portfolio transactions).! !

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactions stamp: 'fp 11/25/2021 20:45:43'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'fp 11/25/2021 20:45:54'!
transactions
	self shouldBeImplemented.! !

!methodRemoval: Portfolio #transactionsOf: stamp: 'fp 11/25/2021 20:46:23'!
transactionsOf: aReceptiveAccount 
	^aReceptiveAccount transactions!
!Portfolio methodsFor: 'main protocol' stamp: 'fp 11/25/2021 20:46:59' prior: 50886089!
transactions
	^accounts first transactions.! !

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactions stamp: 'fp 11/25/2021 20:47:01'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/25/2021 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/25/2021 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/25/2021 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/25/2021 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/25/2021 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactions stamp: 'fp 11/25/2021 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/25/2021 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/25/2021 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/25/2021 20:47:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/25/2021 20:47:02'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/25/2021 20:47:41'!
test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	Withdraw register: 50 * peso on: account.

	portfolio addAccount: account.

	self assert: account transactions equals: (portfolio transactions).! !

!methodRemoval: PortfolioTest #test06PortfolioCanReturnAllItsTransactions stamp: 'fp 11/25/2021 20:47:41'!
test06PortfolioCanReturnAllItsTransactions

	| portfolio account |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	Withdraw register: 50 * peso on: account.

	portfolio addAccount: account.

	self assert: account transactions equals: (portfolio transactions).!

#(1 2 3) + #(4 5 6)!

#(1 2 3) concatenation !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/25/2021 20:56:44'!
test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount

	| portfolio account1 account2 allTransactions |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account1.
	Withdraw register: 50 * peso on: account2.

	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	allTransactions := (account1 transactions) addAll: account2 transactions.
	

	self assert: allTransactions equals: (portfolio transactions).! !

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/25/2021 20:56:51'!
FAILURE!

#(1 2 3) addAll: #(4 5 6)!


	
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account1.
	Withdraw register: 50 * peso on: account2.

	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	
	

	!

	(account1 transactions) addAll: account2 transactions.!

account1 transactions !

account2 transactions !

account1 transactions + account2 transactions !

orderedCollection new addAll:account2 transactions.!

OrderedCollection new addAll:account2 transactions.!

(OrderedCollection new addAll:account2 transactions)addAll: account1 transactions .!

OrderedCollection with: account1 transactions.!

transac := (OrderedCollection new addAll:account2 transactions).!

transac := (OrderedCollection new addAll:account1 transactions).!

transac := ((account2 transactions) new addAll:account1 transactions).!

transac := ((account2 transactions) addAll:account1 transactions).!

transac := ((account2 transactions) addAll:(account1 transactions)asArray).!

transac := (OrderedCollection new addAll:account2 transactions).
transac := (transac addAll:account1 transactions). !

transac := (OrderedCollection new addAll:account2 transactions).
transac := (transac addAll:account1 transactions). 
transac.!

allTransactions := #((account1 transactions) (account2 transactions)).!

allTransactions := #((account1 transactions) (account2 transactions)).!

----QUIT----(25 November 2021 21:11:42) CuisUniversity-4532.image priorSource: 17740112!

----STARTUP---- (28 November 2021 17:08:29) as /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/CuisUniversity-4532.image!


!testRun: #TransferTest #test01DestinationAccountIncreasesBalanceAnOriginAccountDecreasesBalanceOnTransfer stamp: 'fp 11/28/2021 17:09:35'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 17:09:35'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/28/2021 17:09:35'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:09:42'!
FAILURE!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #TransferTest #test01DestinationAccountIncreasesBalanceAnOriginAccountDecreasesBalanceOnTransfer stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/28/2021 17:09:42'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:09:42'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:10:55'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 17:11:02'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 17:11:02'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 17:11:02'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 17:11:02'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 17:11:02'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 17:11:02'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 17:11:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:11:02'!
FAILURE!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 17:11:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 17:11:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 17:11:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 17:11:02'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:11:02'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 17:11:33'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 17:11:33'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 17:11:33'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 17:11:33'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 17:11:33'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 17:11:33'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 17:11:33'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:11:33'!
FAILURE!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 17:11:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 17:11:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 17:11:33'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 17:11:33'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:11:33'!
FAILURE!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 17:11:41'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:11:44'!
FAILURE!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:11:44'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 17:12:34' prior: 50886171!
test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount

	| portfolio account1 account2 allTransactions account |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account1.
	Withdraw register: 50 * peso on: account2.

	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	
	 allTransactions := account transactions.
    allTransactions addAllLast: account1 transactions.

	self assert: allTransactions equals: (portfolio transactions).! !

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:12:41'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 17:13:02' prior: 50886455!
test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount

	| portfolio account1 account2 allTransactions account |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account1.
	Withdraw register: 50 * peso on: account2.

	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	allTransactions := account transactions.
    allTransactions addAllLast: account1 transactions.

	self assert: allTransactions equals: (portfolio transactions).! !

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:13:05'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 17:13:32' prior: 50886480!
test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount

	| portfolio account1 account2 allTransactions |
	
	portfolio := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account1.
	Withdraw register: 50 * peso on: account2.

	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	allTransactions := account1 transactions.
    allTransactions addAllLast: account2 transactions.

	self assert: allTransactions equals: (portfolio transactions).! !

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:13:32'!
FAILURE!

self transactions !
!Portfolio methodsFor: 'main protocol' stamp: 'fp 11/28/2021 17:15:54' prior: 50886098!
transactions
	| allTransaction allTransactions |
	allTransaction := OrderedCollection new.
	accounts do:[:anAccount|
		allTransactions addAllLast: anAccount transactions.
	].

    ^allTransactions.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 17:15:59'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 17:15:59'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 17:15:59'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 17:15:59'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 17:15:59'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 17:15:59'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:15:59'!
ERROR!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 17:15:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 17:15:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 17:15:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 17:15:59'!
PASSED!
!Portfolio methodsFor: 'main protocol' stamp: 'fp 11/28/2021 17:16:13' prior: 50886529!
transactions
	| allTransactions |
	allTransactions := OrderedCollection new.
	accounts do:[:anAccount|
		allTransactions addAllLast: anAccount transactions.
	].

    ^allTransactions.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 17:16:13'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 17:16:13'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 17:16:13'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 17:16:13'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 17:16:13'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 17:16:13'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:16:13'!
PASSED!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 17:16:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 17:16:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 17:16:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 17:16:13'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 17:17:14'!
test08PortfolioCanReturnAllItsTransactionsWhenHasTwoAccountAndOnePortfolio

	| account1 account2 allTransactions portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account1.
	Withdraw register: 50 * peso on: account2.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	allTransactions := account1 transactions.
    allTransactions addAllLast: account2 transactions.

	self assert: allTransactions equals: (portfolio1 transactions).! !

set2:=Set new.!

set1:=Set new.
set2:=Set new.

set1 addAll: #(1 2 3).
set1.
!

set2 addAll: #(2 1 3).
set2.!

set1 = set2.!

set1:=Set new.
set2:=Set new.

set1 addAll: #('hello' 2 3).
set1.

set2 addAll: #(2 'hello' 3).
set2.

set1 = set2.!

#('hello' 2 3) asBag.!

#('hello' 2 3) asSet.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 17:24:30' prior: 50886629!
test08PortfolioCanReturnAllItsTransactionsWhenHasTwoAccountAndOnePortfolio

	| account1 account2 allTransactions portfolio1 portfolio2 account3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account1.
	Withdraw register: 50 * peso on: account2.
	Withdraw register: 50 * peso on: account3.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addAccount: account3.
	portfolio1 addAccount: portfolio2.
	
	allTransactions := account1 transactions.
    allTransactions addAllLast: account2 transactions.

	self assert: allTransactions equals: (portfolio1 transactions).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 17:25:06' prior: 50886660!
test08PortfolioCanReturnAllItsTransactionsWhenHasTwoAccountAndOnePortfolio

	| account1 account2 allTransactions portfolio1 portfolio2 account3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account1.
	Withdraw register: 50 * peso on: account2.
	Withdraw register: 50 * peso on: account3.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addAccount: account3.
	portfolio1 addAccount: portfolio2.
	
	allTransactions := account1 transactions.
    allTransactions addAllLast: account2 transactions.
	allTransactions addAllLast: account3 transactions.

	self assert: allTransactions asSet equals: (portfolio1 transactions) asSet.! !

!testRun: #PortfolioTest #test08PortfolioCanReturnAllItsTransactionsWhenHasTwoAccountAndOnePortfolio stamp: 'fp 11/28/2021 17:25:07'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 17:25:07'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 17:25:07'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 17:25:07'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 17:25:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 17:25:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 17:25:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:25:07'!
PASSED!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 17:25:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanReturnAllItsTransactionsWhenHasTwoAccountAndOnePortfolio stamp: 'fp 11/28/2021 17:25:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 17:25:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 17:25:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 17:25:07'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 17:25:24' prior: 50886687!
test08PortfolioCanReturnAllItsTransactionsWhenHasTwoAccountAndOnePortfolio

	| account1 account2 allTransactions portfolio1 portfolio2 account3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account1.
	Withdraw register: 50 * peso on: account2.
	Withdraw register: 50 * peso on: account3.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addAccount: account3.
	portfolio1 addAccount: portfolio2.
	
	allTransactions := account1 transactions.
    allTransactions addAllLast: account2 transactions.
	allTransactions addAllLast: account3 transactions.

	self assert: allTransactions equals: (portfolio1 transactions).! !

!testRun: #PortfolioTest #test08PortfolioCanReturnAllItsTransactionsWhenHasTwoAccountAndOnePortfolio stamp: 'fp 11/28/2021 17:25:24'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 17:25:24'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 17:25:24'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 17:25:24'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 17:25:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 17:25:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 17:25:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:25:24'!
PASSED!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 17:25:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCanReturnAllItsTransactionsWhenHasTwoAccountAndOnePortfolio stamp: 'fp 11/28/2021 17:25:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 17:25:24'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 17:25:24'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 17:25:24'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 17:25:39' prior: 50886766!
test08PortfolioCanReturnAllItsTransactionsWhenHasTwoAccountAndOnePortfolio

	| account1 account2 allTransactions portfolio1 portfolio2 account3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account1.
	Withdraw register: 50 * peso on: account2.
	Withdraw register: 50 * peso on: account3.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addAccount: account3.
	portfolio1 addAccount: portfolio2.
	
	allTransactions := account1 transactions.
	allTransactions addAllLast: account3 transactions.
    allTransactions addAllLast: account2 transactions.


	self assert: allTransactions equals: (portfolio1 transactions).! !

!testRun: #PortfolioTest #test08PortfolioCanReturnAllItsTransactionsWhenHasTwoAccountAndOnePortfolio stamp: 'fp 11/28/2021 17:25:39'!
FAILURE!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 17:25:54' prior: 50886845!
test08PortfolioCanReturnAllItsTransactionsWhenHasTwoAccountAndOnePortfolio

	| account1 account2 allTransactions portfolio1 portfolio2 account3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account1.
	Withdraw register: 50 * peso on: account2.
	Withdraw register: 50 * peso on: account3.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addAccount: account3.
	portfolio1 addAccount: portfolio2.
	
	allTransactions := account1 transactions.
    allTransactions addAllLast: account2 transactions.
	allTransactions addAllLast: account3 transactions.

	self assert: allTransactions asSet equals: (portfolio1 transactions) asSet.! !

!methodRemoval: PortfolioTest #test08PortfolioCanReturnAllItsTransactionsWhenHasTwoAccountAndOnePortfolio stamp: 'fp 11/28/2021 17:26:13'!
test08PortfolioCanReturnAllItsTransactionsWhenHasTwoAccountAndOnePortfolio

	| account1 account2 allTransactions portfolio1 portfolio2 account3 |
	
	portfolio1 := Portfolio new.
	portfolio2 := Portfolio new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	account3 := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account1.
	Withdraw register: 50 * peso on: account2.
	Withdraw register: 50 * peso on: account3.

	portfolio1 addAccount: account1.
	portfolio1 addAccount: account2.
	
	portfolio2 addAccount: account3.
	portfolio1 addAccount: portfolio2.
	
	allTransactions := account1 transactions.
    allTransactions addAllLast: account2 transactions.
	allTransactions addAllLast: account3 transactions.

	self assert: allTransactions asSet equals: (portfolio1 transactions) asSet.!
!Portfolio methodsFor: 'associating' stamp: 'fp 11/28/2021 17:34:37' prior: 50886011!
addAccount: aReceptiveAccount 

	(self hasAccount: aReceptiveAccount) ifTrue: [
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self = aReceptiveAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].

	accounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'private' stamp: 'fp 11/28/2021 17:34:38' prior: 50885913!
hasAccount: aReceptiveAccount 

	accounts do: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue: [
			(anAccount hasAccount: aReceptiveAccount) ifTrue:[
				^true
			]
		]
	].

	^accounts includes: aReceptiveAccount.! !
!Portfolio methodsFor: 'private' stamp: 'fp 11/28/2021 17:35:03' prior: 50886949!
hasAccount: aReceptiveAccount 

	accounts do: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue: [
			^(anAccount hasAccount: aReceptiveAccount) 
		]
	].

	^accounts includes: aReceptiveAccount.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 17:35:05'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 17:35:05'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 17:35:05'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 17:35:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 17:35:05'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 17:35:05'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:35:05'!
PASSED!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 17:35:05'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 17:35:05'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 17:35:05'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 17:35:05'!
PASSED!
!Portfolio methodsFor: 'associating' stamp: 'fp 11/28/2021 17:36:10' prior: 50886937!
addAccount: anAccount 

	(self hasAccount: anAccount) ifTrue: [
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self = anAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].

	accounts add: anAccount.! !

portfolio := Portfolio new.
portfolio1 := Portfolio new.
	
portfolio addAccount: portfolio1.
portfolio addAccount: portfolio1.
	
portfolio.!

 a Portfolio !

portfolio.!

 a Portfolio !

portfolio!
!Portfolio methodsFor: 'private' stamp: 'fp 11/28/2021 17:43:23' prior: 50886959!
hasAccount: aReceptiveAccount 

	accounts do: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue: [
			^(anAccount hasAccount: aReceptiveAccount) and: [anAccount == aReceptiveAccount ]
		]
	].

	^accounts includes: aReceptiveAccount.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 17:43:24'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 17:43:24'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 17:43:24'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 17:43:24'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 17:43:24'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 17:43:24'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:43:24'!
PASSED!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 17:43:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 17:43:24'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 17:43:24'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 17:43:24'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 17:43:24'!
FAILURE!

portfolio := Portfolio new.
portfolio1 := Portfolio new.
	
portfolio addAccount: portfolio1.
portfolio addAccount: portfolio1.
	
portfolio.!

portfolio1 == portfolio1 .!

portfolio1 == portfolio1.!
!Portfolio methodsFor: 'private' stamp: 'fp 11/28/2021 17:45:38' prior: 50887026!
hasAccount: aReceptiveAccount 

	accounts do: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue: [
			^(anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount]
		]
	].

	^accounts includes: aReceptiveAccount.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 17:45:38'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 17:45:38'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 17:45:38'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 17:45:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 17:45:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 17:45:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 17:45:38'!
PASSED!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 17:45:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 17:45:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 17:45:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 17:45:38'!
PASSED!

portfolio := Portfolio new.
portfolio1 := Portfolio new.
	
portfolio addAccount: portfolio1.
portfolio addAccount: portfolio1.

portfolio.
!

portfolio1 = portfolio1.!
!WithdrawalLeg methodsFor: 'value' stamp: 'fp 11/28/2021 17:54:45'!
ofTransfer: aCounterparty

	counterparty := aCounterparty ! !
!DepositLeg methodsFor: 'value' stamp: 'fp 11/28/2021 17:54:45'!
ofTransfer: aCounterparty

	counterparty := aCounterparty ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 17:54:45' prior: 50881956!
initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount

	depositLeg := DepositLeg register: anAmount on: aDestinationAccount.
	withdrawalLeg := WithdrawalLeg register: anAmount on: anOriginAccount.
	
	depositLeg ofTransfer: withdrawalLeg.
	withdrawalLeg ofTransfer: depositLeg.
	

	! !

!methodRemoval: WithdrawalLeg #defineCounterparty: stamp: 'fp 11/28/2021 17:54:45'!
defineCounterparty: aCounterparty

	counterparty := aCounterparty !

!methodRemoval: DepositLeg #defineCounterparty: stamp: 'fp 11/28/2021 17:54:45'!
defineCounterparty: aCounterparty

	counterparty := aCounterparty !
!DepositLeg methodsFor: 'value' stamp: 'fp 11/28/2021 17:56:32' prior: 50887148!
ofTransfer: anTransfer

	| transfer |
	transfer := anTransfer ! !
!DepositLeg methodsFor: 'value' stamp: 'fp 11/28/2021 17:56:39' prior: 50887175!
ofTransfer: anTransfer

	| transfer |
	transfer := anTransfer ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 17:57:01' prior: 50887153!
initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount

	depositLeg := DepositLeg register: anAmount on: aDestinationAccount.
	withdrawalLeg := WithdrawalLeg register: anAmount on: anOriginAccount.
	
	depositLeg ofTransfer: self.
	withdrawalLeg ofTransfer: self.
	

	! !

AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #DepositLeg category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 17:57:07'!
AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!DepositLeg methodsFor: 'value' stamp: 'fp 11/28/2021 17:58:07' prior: 50887180!
ofTransfer: anTransfer

	| transfers |
	transfers := anTransfer ! !

!classDefinition: #DepositLeg category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 17:58:16'!
AccountTransaction subclass: #DepositLeg
	instanceVariableNames: 'value transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!DepositLeg methodsFor: 'value' stamp: 'fp 11/28/2021 17:58:15' prior: 50887211!
ofTransfer: anTransfer

	transfer := anTransfer ! !

!classDefinition: #WithdrawalLeg category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 17:58:25'!
AccountTransaction subclass: #WithdrawalLeg
	instanceVariableNames: 'value counterparty transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!WithdrawalLeg methodsFor: 'value' stamp: 'fp 11/28/2021 17:58:24' prior: 50887144!
ofTransfer: anTransfer

	transfer := anTransfer ! !
!WithdrawalLeg methodsFor: 'value' stamp: 'fp 11/28/2021 17:58:56' prior: 50881706!
counterparty

	^transfer depositLeg! !
!DepositLeg methodsFor: 'value' stamp: 'fp 11/28/2021 18:00:19' prior: 50881752!
counterparty

	^transfer withdrawalLeg! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 18:00:28'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 18:00:28'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 18:00:28'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 18:00:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 18:00:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 18:00:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 18:00:29'!
PASSED!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 18:00:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 18:00:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 18:00:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 18:00:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/28/2021 18:00:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 18:00:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 18:00:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/28/2021 18:00:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/28/2021 18:00:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/28/2021 18:00:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/28/2021 18:00:29'!
PASSED!

!testRun: #TransferTest #test01DestinationAccountIncreasesBalanceAnOriginAccountDecreasesBalanceOnTransfer stamp: 'fp 11/28/2021 18:00:29'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 18:00:29'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/28/2021 18:00:29'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:03:55'!
test04TransferenceCanAnswerItsValue

	| destinationAccount originAccount aTransference |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	aTransference := Transfer from: originAccount to: destinationAccount for: 100*peso.
	
	self assert: 100*peso equals: aTransference value.
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:06:20'!
test01DestinationAccountIncreasesBalanceAndOriginAccountDecreasesBalanceOnTransfer

	| destinationAccount originAccount |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	Transfer from: originAccount to: destinationAccount for: 100 * peso.
	
	self assert: originAccount balance equals: -100 * peso.
	self assert: destinationAccount balance equals: 100 * peso.! !

!methodRemoval: TransferTest #test01DestinationAccountIncreasesBalanceAnOriginAccountDecreasesBalanceOnTransfer stamp: 'fp 11/28/2021 18:06:20'!
test01DestinationAccountIncreasesBalanceAnOriginAccountDecreasesBalanceOnTransfer

	| destinationAccount originAccount |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	Transfer from: originAccount to: destinationAccount for: 100 * peso.
	
	self assert: originAccount balance equals: -100 * peso.
	self assert: destinationAccount balance equals: 100 * peso.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:06:59'!
test01OnTransferDestinationAccountIncreasesBalanceAndOriginAccountDecreasesBalance

	| destinationAccount originAccount |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	Transfer from: originAccount to: destinationAccount for: 100 * peso.
	
	self assert: originAccount balance equals: -100 * peso.
	self assert: destinationAccount balance equals: 100 * peso.! !

!methodRemoval: TransferTest #test01DestinationAccountIncreasesBalanceAndOriginAccountDecreasesBalanceOnTransfer stamp: 'fp 11/28/2021 18:06:59'!
test01DestinationAccountIncreasesBalanceAndOriginAccountDecreasesBalanceOnTransfer

	| destinationAccount originAccount |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	Transfer from: originAccount to: destinationAccount for: 100 * peso.
	
	self assert: originAccount balance equals: -100 * peso.
	self assert: destinationAccount balance equals: 100 * peso.!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:07:41'!
test01OnTransferDestinationAccountBalanceIncreasesAndOriginAccountBalanceDecreases

	| destinationAccount originAccount |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	Transfer from: originAccount to: destinationAccount for: 100 * peso.
	
	self assert: originAccount balance equals: -100 * peso.
	self assert: destinationAccount balance equals: 100 * peso.! !

!methodRemoval: TransferTest #test01OnTransferDestinationAccountIncreasesBalanceAndOriginAccountDecreasesBalance stamp: 'fp 11/28/2021 18:07:41'!
test01OnTransferDestinationAccountIncreasesBalanceAndOriginAccountDecreasesBalance

	| destinationAccount originAccount |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	Transfer from: originAccount to: destinationAccount for: 100 * peso.
	
	self assert: originAccount balance equals: -100 * peso.
	self assert: destinationAccount balance equals: 100 * peso.!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #TransferTest #test01OnTransferDestinationAccountBalanceIncreasesAndOriginAccountBalanceDecreases stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/28/2021 18:07:52'!
PASSED!

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 11/28/2021 18:07:52'!
FAILURE!

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 11/28/2021 18:07:52'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:08:10' overrides: 16881508!
value

	^100 * peso ! !

!testRun: #TransferTest #test01OnTransferDestinationAccountBalanceIncreasesAndOriginAccountBalanceDecreases stamp: 'fp 11/28/2021 18:08:11'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 18:08:11'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/28/2021 18:08:11'!
PASSED!

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 11/28/2021 18:08:11'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:09:36' prior: 50887331!
test04TransferenceCanAnswerItsValue

	| destinationAccount originAccount aTransference1 aTransference2 |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	aTransference1 := Transfer from: originAccount to: destinationAccount for: 100*peso.
	aTransference2 := Transfer from: originAccount to: destinationAccount for: 50*peso.
	
	self assert: 100*peso equals: aTransference1 value.
	self assert: 50*peso equals: aTransference2 value.
	! !

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 11/28/2021 18:09:44'!
FAILURE!

!classDefinition: #Transfer category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 18:10:43'!
Object subclass: #Transfer
	instanceVariableNames: 'depositLeg withdrawalLeg value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:10:41' prior: 50887185!
initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount

	depositLeg := DepositLeg register: anAmount on: aDestinationAccount.
	withdrawalLeg := WithdrawalLeg register: anAmount on: anOriginAccount.
	
	depositLeg ofTransfer: self.
	withdrawalLeg ofTransfer: self.
	value := anAmount.
	

	! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:10:48' prior: 50887528 overrides: 16881508!
value

	^value.! !

!testRun: #TransferTest #test01OnTransferDestinationAccountBalanceIncreasesAndOriginAccountBalanceDecreases stamp: 'fp 11/28/2021 18:10:48'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 18:10:48'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/28/2021 18:10:48'!
PASSED!

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 11/28/2021 18:10:48'!
PASSED!
!Transfer class methodsFor: 'instance creation' stamp: 'fp 11/28/2021 18:13:04' prior: 50881378!
from: anOriginAccount to: aDestinationAccount for: anAmount

 	(anAmount <= 0) ifTrue:[
		self error: self negativeAmountErrorDescription.
	].
	
	^self new initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount! !
!Transfer class methodsFor: 'instance creation' stamp: 'fp 11/28/2021 18:13:19' prior: 50887609!
from: anOriginAccount to: aDestinationAccount for: anAmount

 	(anAmount < 0) ifTrue:[
		self error: self negativeAmountErrorDescription.
	].
	
	^self new initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:14:13'!
test05CannotTransferZero

	| destinationAccount originAccount |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	self
		should: [	Transfer from: originAccount to: destinationAccount for: 0*peso.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Transfer negativeAmountErrorDescription.
			self assert: destinationAccount balance equals: 0*peso.
			self assert: originAccount balance equals: 0*peso.
		].! !

!testRun: #TransferTest #test05CannotTransferZero stamp: 'fp 11/28/2021 18:14:14'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'fp 11/28/2021 18:14:21' prior: 50887620!
from: anOriginAccount to: aDestinationAccount for: anAmount

 	(anAmount <= 0) ifTrue:[
		self error: self negativeAmountErrorDescription.
	].
	
	^self new initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount! !

!testRun: #TransferTest #test01OnTransferDestinationAccountBalanceIncreasesAndOriginAccountBalanceDecreases stamp: 'fp 11/28/2021 18:14:22'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 18:14:22'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/28/2021 18:14:22'!
PASSED!

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 11/28/2021 18:14:22'!
PASSED!

!testRun: #TransferTest #test05CannotTransferZero stamp: 'fp 11/28/2021 18:14:22'!
PASSED!
!Transfer class methodsFor: 'instance creation' stamp: 'fp 11/28/2021 18:14:47'!
invalidAmountErrorDescription
	^'Amount is negative'! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:14:47' prior: 50887652!
from: anOriginAccount to: aDestinationAccount for: anAmount

 	(anAmount <= 0) ifTrue:[
		self error: self invalidAmountErrorDescription.
	].
	
	^self new initializeFrom: anOriginAccount to: aDestinationAccount for: anAmount! !

!methodRemoval: Transfer class #negativeAmountErrorDescription stamp: 'fp 11/28/2021 18:14:47'!
negativeAmountErrorDescription
	^'Amount is negative'!
!Transfer class methodsFor: 'instance creation' stamp: 'fp 11/28/2021 18:14:56' prior: 50887679!
invalidAmountErrorDescription
	^'Amount is invalid'! !
!Transfer class methodsFor: 'instance creation' stamp: 'fp 11/28/2021 18:15:30' prior: 50887699!
invalidAmountErrorDescription
	^'Invalid amount'! !

!testRun: #TransferTest #test05CannotTransferZero stamp: 'fp 11/28/2021 18:15:56'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:16:05' prior: 50887630!
test05CannotTransferZero

	| destinationAccount originAccount |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	self
		should: [	Transfer from: originAccount to: destinationAccount for: 0*peso.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Transfer invalidAmountErrorDescription.
			self assert: destinationAccount balance equals: 0*peso.
			self assert: originAccount balance equals: 0*peso.
		].! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:16:10' prior: 50880794!
test02CannotTransferNegativeAmount

	| destinationAccount originAccount |
	originAccount := ReceptiveAccount new.
	destinationAccount := ReceptiveAccount new.
	
	self
		should: [	Transfer from: originAccount to: destinationAccount for: -100*peso.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError |
			self assert: anError messageText = Transfer invalidAmountErrorDescription.
			self assert: destinationAccount balance equals: 0*peso.
			self assert: originAccount balance equals: 0*peso.
		].! !

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 18:16:11'!
PASSED!

!testRun: #TransferTest #test01OnTransferDestinationAccountBalanceIncreasesAndOriginAccountBalanceDecreases stamp: 'fp 11/28/2021 18:16:11'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 18:16:11'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/28/2021 18:16:11'!
PASSED!

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 11/28/2021 18:16:11'!
PASSED!

!testRun: #TransferTest #test05CannotTransferZero stamp: 'fp 11/28/2021 18:16:11'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #TransferTest #test01OnTransferDestinationAccountBalanceIncreasesAndOriginAccountBalanceDecreases stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 11/28/2021 18:16:14'!
PASSED!

!testRun: #TransferTest #test05CannotTransferZero stamp: 'fp 11/28/2021 18:16:14'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:23:51'!
test10PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts

	| portfolio1 portfolio2 account1 account2 portfolio |
	
	portfolio := Portfolio new.	
	portfolio1 := Portfolio new.	
	
	account1 := ReceptiveAccount new.
	
	portfolio addAccount: account1.
	portfolio1 addAccount: account1.
	
	Deposit register: 50 * peso on: account1.
	Deposit register: 100 * peso on: account2.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	self assert: 150 * peso equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:24:30'!
test11PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts

	| portfolio1 portfolio2 account1 account2 portfolio |
	
	portfolio := Portfolio new.	
	portfolio1 := Portfolio new.	
	
	account1 := ReceptiveAccount new.
	
	portfolio addAccount: account1.
	portfolio1 addAccount: account1.
	
	Deposit register: 50 * peso on: account1.
	Deposit register: 100 * peso on: account2.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	self assert: 150 * peso equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test10PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 18:24:30'!
test10PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts

	| portfolio1 portfolio2 account1 account2 portfolio |
	
	portfolio := Portfolio new.	
	portfolio1 := Portfolio new.	
	
	account1 := ReceptiveAccount new.
	
	portfolio addAccount: account1.
	portfolio1 addAccount: account1.
	
	Deposit register: 50 * peso on: account1.
	Deposit register: 100 * peso on: account2.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	self assert: 150 * peso equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:24:46'!
test08PortofioCantAddSameAccountTwice

	| portfolio account previousPortfolioBalance |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	portfolio addAccount: account.
	
	previousPortfolioBalance := portfolio balance.

	self
		should: [	portfolio addAccount: account.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio balance.
		].! !

!methodRemoval: PortfolioTest #test07PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 18:24:46'!
test07PortofioCantAddSameAccountTwice

	| portfolio account previousPortfolioBalance |
	
	portfolio := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	portfolio addAccount: account.
	
	previousPortfolioBalance := portfolio balance.

	self
		should: [	portfolio addAccount: account.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio balance.
		].!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:24:57'!
test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios

	| account previousPortfolioBalance portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.	
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	portfolio2 addAccount: account.
	portfolio1 addAccount: portfolio2.
	
	previousPortfolioBalance := portfolio1 balance.

	self
		should: [	portfolio1 addAccount: account.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio1 balance.
		].! !

!methodRemoval: PortfolioTest #test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 18:24:57'!
test08PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios

	| account previousPortfolioBalance portfolio1 portfolio2 |
	
	portfolio1 := Portfolio new.	
	portfolio2 := Portfolio new.
	account := ReceptiveAccount new.
	
	Deposit register: 100 * peso on: account.
	portfolio2 addAccount: account.
	portfolio1 addAccount: portfolio2.
	
	previousPortfolioBalance := portfolio1 balance.

	self
		should: [	portfolio1 addAccount: account.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio1 balance.
		].!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:25:04'!
test10PortfolioCanAddMoreThanOnePorfolio

	| portfolio1 portfolio2 account1 account2 portfolio |
	
	portfolio := Portfolio new.	
	portfolio1 := Portfolio new.	
	portfolio2 := Portfolio new.
	
	portfolio addAccount: portfolio1.
	portfolio addAccount: portfolio2.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 50 * peso on: account1.
	Deposit register: 100 * peso on: account2.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	self assert: 150 * peso equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test09PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 18:25:04'!
test09PortfolioCanAddMoreThanOnePorfolio

	| portfolio1 portfolio2 account1 account2 portfolio |
	
	portfolio := Portfolio new.	
	portfolio1 := Portfolio new.	
	portfolio2 := Portfolio new.
	
	portfolio addAccount: portfolio1.
	portfolio addAccount: portfolio2.
	
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	Deposit register: 50 * peso on: account1.
	Deposit register: 100 * peso on: account2.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	self assert: 150 * peso equals: portfolio balance.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:25:10'!
test11PortfolioCantIncludeItSelf

	| portfolio |
	
	portfolio := Portfolio new.	
	
	self
		should: [	portfolio addAccount: portfolio.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio invalidPortfolioErrorDescription.
		].! !

!methodRemoval: PortfolioTest #test10PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 18:25:10'!
test10PortfolioCantIncludeItSelf

	| portfolio |
	
	portfolio := Portfolio new.	
	
	self
		should: [	portfolio addAccount: portfolio.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio invalidPortfolioErrorDescription.
		].!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:25:18'!
test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts

	| portfolio1 portfolio2 account1 account2 portfolio |
	
	portfolio := Portfolio new.	
	portfolio1 := Portfolio new.	
	
	account1 := ReceptiveAccount new.
	
	portfolio addAccount: account1.
	portfolio1 addAccount: account1.
	
	Deposit register: 50 * peso on: account1.
	Deposit register: 100 * peso on: account2.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	self assert: 150 * peso equals: portfolio balance.! !

!methodRemoval: PortfolioTest #test11PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 18:25:18'!
test11PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts

	| portfolio1 portfolio2 account1 account2 portfolio |
	
	portfolio := Portfolio new.	
	portfolio1 := Portfolio new.	
	
	account1 := ReceptiveAccount new.
	
	portfolio addAccount: account1.
	portfolio1 addAccount: account1.
	
	Deposit register: 50 * peso on: account1.
	Deposit register: 100 * peso on: account2.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	self assert: 150 * peso equals: portfolio balance.!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 18:25:25'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 18:25:25'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 18:25:25'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 18:25:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 18:25:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 18:25:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 18:25:25'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 18:25:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 18:25:25'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 18:25:25'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 18:25:25'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 18:25:25'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/28/2021 18:25:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 18:25:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 18:25:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/28/2021 18:25:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/28/2021 18:25:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/28/2021 18:25:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/28/2021 18:25:26'!
PASSED!

!testRun: #TransferTest #test01OnTransferDestinationAccountBalanceIncreasesAndOriginAccountBalanceDecreases stamp: 'fp 11/28/2021 18:25:26'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 18:25:26'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/28/2021 18:25:26'!
PASSED!

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 11/28/2021 18:25:26'!
PASSED!

!testRun: #TransferTest #test05CannotTransferZero stamp: 'fp 11/28/2021 18:25:26'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 18:25:26'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:26:12' prior: 50888069!
test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts

	| portfolio1 account1 portfolio |
	
	portfolio := Portfolio new.	
	portfolio1 := Portfolio new.	
	
	account1 := ReceptiveAccount new.
	
	portfolio addAccount: account1.
	portfolio1 addAccount: account1.
	
	self
		should: [	portfolio addAccount: portfolio1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio invalidPortfolioErrorDescription.
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:27:14' prior: 50888200!
test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts

	| portfolio1 account1 portfolio |
	
	portfolio := Portfolio new.	
	portfolio1 := Portfolio new.	
	
	account1 := ReceptiveAccount new.
	
	portfolio addAccount: account1.
	portfolio1 addAccount: account1.
	
	self
		should: [	portfolio addAccount: portfolio1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
		].! !

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 18:27:17'!
FAILURE!

!classDefinition: #PortfolioTest category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 18:32:23'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolioi'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:32:21' prior: 50881998!
test01EmptyPortfolioHasBalanceOfZero

	
	self assert: 0 equals: portfolioi balance.! !

!classDefinition: #PortfolioTest category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 18:32:37'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolioi portfolio1i'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #PortfolioTest category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 18:32:39'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolioi portfolio1i portfolio2i'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #PortfolioTest category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 18:32:40'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolioi portfolio1i portfolio2i accounti'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #PortfolioTest category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 18:32:42'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolioi portfolio1i portfolio2i accounti account1i'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #PortfolioTest category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 18:32:43'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolioi portfolio1i portfolio2i accounti account1i account2i'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:32:35' overrides: 16927572!
setUp
	
	portfolioi := Portfolio new.
	portfolio1i := Portfolio new.	
	portfolio2i := Portfolio new.	
	
	accounti := ReceptiveAccount new.
	account1i := ReceptiveAccount new.
	account2i := ReceptiveAccount new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:32:59' prior: 50882025!
test02WhenPorfolioHasOneAccountBothBalanceAreTheSame

	
	Deposit register: 100 * peso on: accounti.
	portfolioi addAccount: accounti.
	
	self assert: 100 * peso equals: portfolioi balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:33:33' prior: 50882171!
test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances

	
	Deposit register: 100 * peso on: accounti.
	Deposit register: 50 * peso on: account1i.
	portfolioi addAccount: accounti.
	portfolioi addAccount: account1i.
	
	self assert: 150 * peso equals: portfolioi balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:34:01' prior: 50882297!
test04ATransactionRegisteredOnAnAccountInPortfolioIsFound

	| deposit |
	deposit := Deposit register: 100 * peso on: accounti.

	portfolioi addAccount: accounti.

	self assert: (portfolioi hasRegistered: deposit).
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:34:20' prior: 50882329!
test05PortfolioCantFindTransactionNotRegistered

	| deposit |
	deposit := Deposit for: 100 * peso.

	portfolioi addAccount: accounti.

	self deny: (portfolioi hasRegistered: deposit).
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:34:47' prior: 50886142!
test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount
	
	Deposit register: 100 * peso on: accounti.
	Withdraw register: 50 * peso on: accounti.

	portfolioi addAccount: accounti.

	self assert: accounti transactions equals: (portfolioi transactions).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:35:14' prior: 50886504!
test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount
	
	| allTransactions |
	Deposit register: 100 * peso on: account1i.
	Withdraw register: 50 * peso on: account2i.

	portfolioi addAccount: account1i.
	portfolioi addAccount: account2i.
	
	allTransactions := account1i transactions.
    allTransactions addAllLast: account2i transactions.

	self assert: allTransactions equals: (portfolioi transactions).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:35:54' prior: 50887912!
test08PortofioCantAddSameAccountTwice
	
	| previousPortfolioBalance |
	Deposit register: 100 * peso on: accounti.
	portfolioi addAccount: accounti.
	
	previousPortfolioBalance := portfolioi balance.

	self
		should: [	portfolioi addAccount: accounti.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolioi balance.
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:36:42' prior: 50887954!
test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios

	
	| previousPortfolioBalance |
	Deposit register: 100 * peso on: accounti.
	portfolio2i addAccount: accounti.
	portfolio1i addAccount: portfolio2i.
	
	previousPortfolioBalance := portfolio1i balance.

	self
		should: [	portfolio1i addAccount: accounti.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio1i balance.
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:37:18' prior: 50888003!
test10PortfolioCanAddMoreThanOnePorfolio
	
	portfolioi addAccount: portfolio1i.
	portfolioi addAccount: portfolio2i.
	
	
	Deposit register: 50 * peso on: account1i.
	Deposit register: 100 * peso on: account2i.
	
	portfolio1i addAccount: account1i.
	portfolio2i addAccount: account2i.
	
	self assert: 150 * peso equals: portfolioi balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:37:32' prior: 50888044!
test11PortfolioCantIncludeItSelf
	
	self
		should: [	portfolioi addAccount: portfolioi.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio invalidPortfolioErrorDescription.
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:04' prior: 50888219!
test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts
	
	portfolioi addAccount: account1i.
	portfolio1i addAccount: account1i.
	
	self
		should: [	portfolioi addAccount: portfolio1i.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
		].! !

!classDefinition: #PortfolioTest category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 18:38:27'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio portfolio1i portfolio2i accounti account1i account2i'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:27' prior: 50888324!
test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances

	
	Deposit register: 100 * peso on: accounti.
	Deposit register: 50 * peso on: account1i.
	portfolio addAccount: accounti.
	portfolio addAccount: account1i.
	
	self assert: 150 * peso equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:27' prior: 50888250!
test01EmptyPortfolioHasBalanceOfZero

	
	self assert: 0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:27' prior: 50888314!
test02WhenPorfolioHasOneAccountBothBalanceAreTheSame

	
	Deposit register: 100 * peso on: accounti.
	portfolio addAccount: accounti.
	
	self assert: 100 * peso equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:27' prior: 50888385!
test08PortofioCantAddSameAccountTwice
	
	| previousPortfolioBalance |
	Deposit register: 100 * peso on: accounti.
	portfolio addAccount: accounti.
	
	previousPortfolioBalance := portfolio balance.

	self
		should: [	portfolio addAccount: accounti.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio balance.
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:27' prior: 50888439!
test11PortfolioCantIncludeItSelf
	
	self
		should: [	portfolio addAccount: portfolio.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio invalidPortfolioErrorDescription.
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:27' prior: 50888368!
test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount
	
	| allTransactions |
	Deposit register: 100 * peso on: account1i.
	Withdraw register: 50 * peso on: account2i.

	portfolio addAccount: account1i.
	portfolio addAccount: account2i.
	
	allTransactions := account1i transactions.
    allTransactions addAllLast: account2i transactions.

	self assert: allTransactions equals: (portfolio transactions).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:27' prior: 50888356!
test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount
	
	Deposit register: 100 * peso on: accounti.
	Withdraw register: 50 * peso on: accounti.

	portfolio addAccount: accounti.

	self assert: accounti transactions equals: (portfolio transactions).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:27' prior: 50888425!
test10PortfolioCanAddMoreThanOnePorfolio
	
	portfolio addAccount: portfolio1i.
	portfolio addAccount: portfolio2i.
	
	
	Deposit register: 50 * peso on: account1i.
	Deposit register: 100 * peso on: account2i.
	
	portfolio1i addAccount: account1i.
	portfolio2i addAccount: account2i.
	
	self assert: 150 * peso equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:27' prior: 50888337!
test04ATransactionRegisteredOnAnAccountInPortfolioIsFound

	| deposit |
	deposit := Deposit register: 100 * peso on: accounti.

	portfolio addAccount: accounti.

	self assert: (portfolio hasRegistered: deposit).
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:27' prior: 50888347!
test05PortfolioCantFindTransactionNotRegistered

	| deposit |
	deposit := Deposit for: 100 * peso.

	portfolio addAccount: accounti.

	self deny: (portfolio hasRegistered: deposit).
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:27' prior: 50888450!
test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts
	
	portfolio addAccount: account1i.
	portfolio1i addAccount: account1i.
	
	self
		should: [	portfolio addAccount: portfolio1i.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:27' prior: 50888304 overrides: 16927572!
setUp
	
	portfolio := Portfolio new.
	portfolio1i := Portfolio new.	
	portfolio2i := Portfolio new.	
	
	accounti := ReceptiveAccount new.
	account1i := ReceptiveAccount new.
	account2i := ReceptiveAccount new.! !

!classDefinition: #PortfolioTest category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 18:38:49'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio portfolio1 portfolio2i accounti account1i account2i'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:49' prior: 50888404!
test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios

	
	| previousPortfolioBalance |
	Deposit register: 100 * peso on: accounti.
	portfolio2i addAccount: accounti.
	portfolio1 addAccount: portfolio2i.
	
	previousPortfolioBalance := portfolio1 balance.

	self
		should: [	portfolio1 addAccount: accounti.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio1 balance.
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:49' prior: 50888608 overrides: 16927572!
setUp
	
	portfolio := Portfolio new.
	portfolio1 := Portfolio new.	
	portfolio2i := Portfolio new.	
	
	accounti := ReceptiveAccount new.
	account1i := ReceptiveAccount new.
	account2i := ReceptiveAccount new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:49' prior: 50888560!
test10PortfolioCanAddMoreThanOnePorfolio
	
	portfolio addAccount: portfolio1.
	portfolio addAccount: portfolio2i.
	
	
	Deposit register: 50 * peso on: account1i.
	Deposit register: 100 * peso on: account2i.
	
	portfolio1 addAccount: account1i.
	portfolio2i addAccount: account2i.
	
	self assert: 150 * peso equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:49' prior: 50888593!
test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts
	
	portfolio addAccount: account1i.
	portfolio1 addAccount: account1i.
	
	self
		should: [	portfolio addAccount: portfolio1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
		].! !

!classDefinition: #PortfolioTest category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 18:38:53'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio portfolio1 portfolio2 accounti account1i account2i'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:53' prior: 50888649 overrides: 16927572!
setUp
	
	portfolio := Portfolio new.
	portfolio1 := Portfolio new.	
	portfolio2 := Portfolio new.	
	
	accounti := ReceptiveAccount new.
	account1i := ReceptiveAccount new.
	account2i := ReceptiveAccount new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:53' prior: 50888628!
test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios

	
	| previousPortfolioBalance |
	Deposit register: 100 * peso on: accounti.
	portfolio2 addAccount: accounti.
	portfolio1 addAccount: portfolio2.
	
	previousPortfolioBalance := portfolio1 balance.

	self
		should: [	portfolio1 addAccount: accounti.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio1 balance.
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:53' prior: 50888659!
test10PortfolioCanAddMoreThanOnePorfolio
	
	portfolio addAccount: portfolio1.
	portfolio addAccount: portfolio2.
	
	
	Deposit register: 50 * peso on: account1i.
	Deposit register: 100 * peso on: account2i.
	
	portfolio1 addAccount: account1i.
	portfolio2 addAccount: account2i.
	
	self assert: 150 * peso equals: portfolio balance.! !

!classDefinition: #PortfolioTest category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 18:38:56'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio portfolio1 portfolio2 account account1i account2i'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:56' prior: 50888584!
test05PortfolioCantFindTransactionNotRegistered

	| deposit |
	deposit := Deposit for: 100 * peso.

	portfolio addAccount: account.

	self deny: (portfolio hasRegistered: deposit).
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:56' prior: 50888574!
test04ATransactionRegisteredOnAnAccountInPortfolioIsFound

	| deposit |
	deposit := Deposit register: 100 * peso on: account.

	portfolio addAccount: account.

	self assert: (portfolio hasRegistered: deposit).
	! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:56' prior: 50888502!
test08PortofioCantAddSameAccountTwice
	
	| previousPortfolioBalance |
	Deposit register: 100 * peso on: account.
	portfolio addAccount: account.
	
	previousPortfolioBalance := portfolio balance.

	self
		should: [	portfolio addAccount: account.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio balance.
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:56' prior: 50888548!
test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount
	
	Deposit register: 100 * peso on: account.
	Withdraw register: 50 * peso on: account.

	portfolio addAccount: account.

	self assert: account transactions equals: (portfolio transactions).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:56' prior: 50888493!
test02WhenPorfolioHasOneAccountBothBalanceAreTheSame

	
	Deposit register: 100 * peso on: account.
	portfolio addAccount: account.
	
	self assert: 100 * peso equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:56' prior: 50888475!
test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances

	
	Deposit register: 100 * peso on: account.
	Deposit register: 50 * peso on: account1i.
	portfolio addAccount: account.
	portfolio addAccount: account1i.
	
	self assert: 150 * peso equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:56' prior: 50888698 overrides: 16927572!
setUp
	
	portfolio := Portfolio new.
	portfolio1 := Portfolio new.	
	portfolio2 := Portfolio new.	
	
	account := ReceptiveAccount new.
	account1i := ReceptiveAccount new.
	account2i := ReceptiveAccount new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:56' prior: 50888708!
test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios

	
	| previousPortfolioBalance |
	Deposit register: 100 * peso on: account.
	portfolio2 addAccount: account.
	portfolio1 addAccount: portfolio2.
	
	previousPortfolioBalance := portfolio1 balance.

	self
		should: [	portfolio1 addAccount: account.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
			self assert: previousPortfolioBalance equals: portfolio1 balance.
		].! !

!classDefinition: #PortfolioTest category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 18:38:58'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio portfolio1 portfolio2 account account1 account2i'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:58' prior: 50888824 overrides: 16927572!
setUp
	
	portfolio := Portfolio new.
	portfolio1 := Portfolio new.	
	portfolio2 := Portfolio new.	
	
	account := ReceptiveAccount new.
	account1 := ReceptiveAccount new.
	account2i := ReceptiveAccount new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:58' prior: 50888811!
test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances

	
	Deposit register: 100 * peso on: account.
	Deposit register: 50 * peso on: account1.
	portfolio addAccount: account.
	portfolio addAccount: account1.
	
	self assert: 150 * peso equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:58' prior: 50888729!
test10PortfolioCanAddMoreThanOnePorfolio
	
	portfolio addAccount: portfolio1.
	portfolio addAccount: portfolio2.
	
	
	Deposit register: 50 * peso on: account1.
	Deposit register: 100 * peso on: account2i.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2i.
	
	self assert: 150 * peso equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:58' prior: 50888532!
test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount
	
	| allTransactions |
	Deposit register: 100 * peso on: account1.
	Withdraw register: 50 * peso on: account2i.

	portfolio addAccount: account1.
	portfolio addAccount: account2i.
	
	allTransactions := account1 transactions.
    allTransactions addAllLast: account2i transactions.

	self assert: allTransactions equals: (portfolio transactions).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:38:58' prior: 50888673!
test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts
	
	portfolio addAccount: account1.
	portfolio1 addAccount: account1.
	
	self
		should: [	portfolio addAccount: portfolio1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
		].! !

!classDefinition: #PortfolioTest category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 18:39:03'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio portfolio1 portfolio2 account account1 account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:39:03' prior: 50888865 overrides: 16927572!
setUp
	
	portfolio := Portfolio new.
	portfolio1 := Portfolio new.	
	portfolio2 := Portfolio new.	
	
	account := ReceptiveAccount new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:39:03' prior: 50888887!
test10PortfolioCanAddMoreThanOnePorfolio
	
	portfolio addAccount: portfolio1.
	portfolio addAccount: portfolio2.
	
	
	Deposit register: 50 * peso on: account1.
	Deposit register: 100 * peso on: account2.
	
	portfolio1 addAccount: account1.
	portfolio2 addAccount: account2.
	
	self assert: 150 * peso equals: portfolio balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:39:04' prior: 50888901!
test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount
	
	| allTransactions |
	Deposit register: 100 * peso on: account1.
	Withdraw register: 50 * peso on: account2.

	portfolio addAccount: account1.
	portfolio addAccount: account2.
	
	allTransactions := account1 transactions.
    allTransactions addAllLast: account2 transactions.

	self assert: allTransactions equals: (portfolio transactions).! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 18:39:08'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #TransferTest #test01OnTransferDestinationAccountBalanceIncreasesAndOriginAccountBalanceDecreases stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #TransferTest #test05CannotTransferZero stamp: 'fp 11/28/2021 18:39:08'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 18:39:08'!
FAILURE!
!Portfolio methodsFor: 'private' stamp: 'fp 11/28/2021 18:40:59' prior: 50887088!
hasAccount: aReceptiveAccount 

	accounts do: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue: [
			^(anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount]
		].
		(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
			^(aReceptiveAccount hasAccount: anAccount ) or: [anAccount == aReceptiveAccount]
		]
	].

	^accounts includes: aReceptiveAccount.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 18:41:01'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 18:41:01'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 18:41:01'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 18:41:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 18:41:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 18:41:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 18:41:01'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 18:41:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 18:41:01'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 18:41:01'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 18:41:01'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 18:41:01'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:49:13'!
test13PortfolioCantAddAccountIfItsParentsHaveIt
	
	portfolio addAccount: account1.
	portfolio1 addAccount: account1.
	
	self
		should: [	portfolio addAccount: portfolio1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:49:58' prior: 50889134!
test13PortfolioCantAddAccountIfItsParentsHaveIt
	
	portfolio addAccount: account1.
	
	portfolio1 addAccount: account1.
	
	self
		should: [	portfolio addAccount: portfolio1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
		].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 18:51:12' prior: 50889148!
test13PortfolioCantAddAccountIfItsParentsHaveIt
	
	portfolio addAccount: account1.
	portfolio addAccount: portfolio1.
	
	
	self
		should: [portfolio1 addAccount: account1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
		].! !

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 18:51:13'!
FAILURE!
!Portfolio methodsFor: 'associating' stamp: 'fp 11/28/2021 18:55:08' prior: 50887009!
addAccount: anAccount 

	(self hasAccount: anAccount) ifTrue: [
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self = anAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].

	accounts add: anAccount.! !

!classDefinition: #Portfolio category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 18:56:12'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!Portfolio methodsFor: 'associating' stamp: 'fp 11/28/2021 18:56:10' prior: 50889180!
addAccount: anAccount 

	(parentPortfolio hasAccount: anAccount) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].
	(self hasAccount: anAccount) ifTrue: [
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self = anAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].

	accounts add: anAccount.! !

!classDefinition: #Portfolio category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 18:56:56'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts parentPortfolio parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'fp 11/28/2021 18:56:53' prior: 50882192 overrides: 16896425!
initialize
	
	accounts := OrderedCollection new.
	parent := nil.! !
!Portfolio methodsFor: 'initialization' stamp: 'fp 11/28/2021 18:57:32' prior: 50889225 overrides: 16896425!
initialize
	
	accounts := OrderedCollection new.
	parent := nil.! !
!Portfolio methodsFor: 'associating' stamp: 'fp 11/28/2021 19:00:00' prior: 50889200!
addAccount: anAccount 

	(parentPortfolio hasAccount: anAccount) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self hasAccount: anAccount) ifTrue: [
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self = anAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].

	(anAccount isKindOf: Portfolio) ifTrue: [
		anAccount setParent: self.
	].

	accounts add: anAccount.! !
!Portfolio methodsFor: 'main protocol' stamp: 'fp 11/28/2021 19:01:12'!
setParent: aPortfolio

	parentPortfolio := aPortfolio 
	! !

Object subclass: #Portfolio
	instanceVariableNames: 'accounts parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #Portfolio category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 19:01:14'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!Portfolio methodsFor: 'private' stamp: 'fp 11/28/2021 19:01:48'!
parentPortfolio

	^parentPortfolio! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 19:02:38'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 19:02:38'!
ERROR!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 19:02:38'!
ERROR!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 19:02:38'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 19:02:38'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 19:02:38'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 19:02:38'!
ERROR!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 19:02:38'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 19:02:38'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 19:02:38'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 19:02:38'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 19:02:38'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:02:38'!
ERROR!
!Portfolio methodsFor: 'associating' stamp: 'fp 11/28/2021 19:04:02' prior: 50889236!
addAccount: anAccount 

	(parentPortfolio ~= nil and:[parentPortfolio hasAccount: anAccount]) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self hasAccount: anAccount) ifTrue: [
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self = anAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].

	(anAccount isKindOf: Portfolio) ifTrue: [
		anAccount setParent: self.
	].

	accounts add: anAccount.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 19:04:04'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 19:04:04'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 19:04:04'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 19:04:04'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 19:04:04'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 19:04:04'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 19:04:04'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 19:04:04'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 19:04:04'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 19:04:04'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 19:04:04'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 19:04:04'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:04:04'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:04:04'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:04:32'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:04:36'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:04:40'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 19:04:43'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 19:04:43'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 19:04:43'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 19:04:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 19:04:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 19:04:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 19:04:43'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 19:04:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 19:04:43'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 19:04:43'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 19:04:43'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 19:04:43'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:04:43'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:04:43'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:04:48'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:05:36'!
ERROR!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 19:06:56'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 19:06:56'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 19:06:56'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 19:06:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 19:06:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 19:06:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 19:06:56'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 19:06:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 19:06:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 19:06:56'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 19:06:56'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 19:06:56'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:06:56'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:06:56'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:07:03'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:07:10'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 19:08:11'!
setup
	
	portfolio := Portfolio new.
	portfolio1 := Portfolio new.	
	portfolio2 := Portfolio new.	
	
	account := ReceptiveAccount new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.! !

!methodRemoval: PortfolioTest #setUp stamp: 'fp 11/28/2021 19:08:11'!
setUp
	
	portfolio := Portfolio new.
	portfolio1 := Portfolio new.	
	portfolio2 := Portfolio new.	
	
	account := ReceptiveAccount new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 19:08:15'!
ERROR!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 19:08:15'!
ERROR!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 19:08:15'!
ERROR!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 19:08:15'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 19:08:15'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 19:08:15'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 19:08:15'!
ERROR!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 19:08:15'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 19:08:15'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 19:08:15'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 19:08:15'!
ERROR!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 19:08:15'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:08:15'!
ERROR!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 19:08:35' overrides: 16927572!
setUp
	
	portfolio := Portfolio new.
	portfolio1 := Portfolio new.	
	portfolio2 := Portfolio new.	
	
	account := ReceptiveAccount new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 19:08:35'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 19:08:35'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 19:08:35'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 19:08:35'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 19:08:35'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 19:08:35'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 19:08:35'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 19:08:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 19:08:35'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 19:08:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 19:08:35'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 19:08:35'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:08:35'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:08:35'!
FAILURE!

!methodRemoval: PortfolioTest #setup stamp: 'fp 11/28/2021 19:08:46'!
setup
	
	portfolio := Portfolio new.
	portfolio1 := Portfolio new.	
	portfolio2 := Portfolio new.	
	
	account := ReceptiveAccount new.
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 19:08:49'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 19:08:49'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 19:08:49'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 19:08:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 19:08:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 19:08:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 19:08:49'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 19:08:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 19:08:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 19:08:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 19:08:50'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 19:08:50'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:08:50'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:08:50'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:09:25'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:09:28'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:09:30'!
PASSED!

portfolio := Portfolio new.
portfolio1 := Portfolio new.
	
portfolio addAccount: account1.
portfolio addAccount: portfolio1.
	
!

 a Portfolio !

portfolio := Portfolio new.
portfolio1 := Portfolio new.
	
portfolio addAccount: account1.
portfolio addAccount: portfolio1.

portfolio1 addAccount: account1.!

 a Portfolio !

portfolio1 addAccount: account1.!

portfolio := Portfolio new.
portfolio1 := Portfolio new.
	
portfolio addAccount: account1.
portfolio addAccount: portfolio1.

p:=portfolio1 addAccount: account1.
p.!

p.!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 19:13:56' prior: 50889162!
test13PortfolioCantAddAccountIfItsParentsHaveIt
	
	portfolio addAccount: account1.
	portfolio addAccount: portfolio1.
	
	self
		should: [portfolio1 addAccount: account1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
		].! !

account := ReceptiveAccount new.

portfolio := Portfolio new.
portfolio1 := Portfolio new.
	
portfolio addAccount: account1.
portfolio addAccount: portfolio1.

p:=portfolio1 addAccount: account1.
p.!

p.!

account1 := ReceptiveAccount new.

portfolio := Portfolio new.
portfolio1 := Portfolio new.
	
portfolio addAccount: account1.
portfolio addAccount: portfolio1.

p:=portfolio1 addAccount: account1.
p.!

p.!

accounts includes: aReceptiveAccount!

	accounts do: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue: [
			^(anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount]
		].
		(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
			^(aReceptiveAccount hasAccount: anAccount ) or: [anAccount == aReceptiveAccount]
		]
	].!

parentPortfolio ~= nil!

parentPortfolio hasAccount: anAccount!
!Portfolio methodsFor: 'private' stamp: 'fp 11/28/2021 19:24:20' prior: 50889074!
hasAccount: aReceptiveAccount 

	accounts do: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue: [
			((anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
		(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
			((aReceptiveAccount hasAccount: anAccount ) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		]
	].

	^accounts includes: aReceptiveAccount.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 19:24:21'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 19:24:21'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 19:24:21'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 19:24:21'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 19:24:21'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 19:24:21'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 19:24:21'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 19:24:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 19:24:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 19:24:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 19:24:21'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 19:24:21'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 19:24:21'!
PASSED!

----SNAPSHOT----(28 November 2021 19:29:59) CuisUniversity-4532.image priorSource: 17746826!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #TransferTest #test01OnTransferDestinationAccountBalanceIncreasesAndOriginAccountBalanceDecreases stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 11/28/2021 20:19:01'!
PASSED!

!testRun: #TransferTest #test05CannotTransferZero stamp: 'fp 11/28/2021 20:19:01'!
PASSED!
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 20:44:06'!
test14PortfolioCantAddAccountIfItsGrandparentHaveIt
	
	portfolio addAccount: account1.
	portfolio addAccount: portfolio1.
	portfolio1 addAccount: portfolio2.
		
	self
		should: [portfolio2 addAccount: account1.]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [:anError | 
			self assert: anError messageText = Portfolio accountAlreadyRegisteredErrorDescription.
		].! !

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/28/2021 20:44:07'!
FAILURE!
!Portfolio methodsFor: 'main protocol' stamp: 'fp 11/28/2021 20:45:23'!
getRoot

	^parentPortfolio getRoot! !
!Portfolio methodsFor: 'private' stamp: 'fp 11/28/2021 20:46:19' prior: 50889959!
getRoot
	parentPortfolio ifNil:[
	^self.
	].

	^parentPortfolio getRoot! !
!Portfolio methodsFor: 'private' stamp: 'fp 11/28/2021 20:46:26' prior: 50889963!
getRoot
	parentPortfolio ifNil:[
		^self.
	].

	^parentPortfolio getRoot! !
!Portfolio methodsFor: 'associating' stamp: 'fp 11/28/2021 20:47:01' prior: 50889324!
addAccount: anAccount 

	(self getRoot hasAccount: anAccount ) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self hasAccount: anAccount) ifTrue: [
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self = anAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].

	(anAccount isKindOf: Portfolio) ifTrue: [
		anAccount setParent: self.
	].

	accounts add: anAccount.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 20:47:03'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 20:47:03'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 20:47:03'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 20:47:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 20:47:03'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 20:47:03'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 20:47:03'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 20:47:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 20:47:03'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 20:47:03'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 20:47:03'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 20:47:03'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 20:47:03'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/28/2021 20:47:03'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'fp 11/28/2021 20:47:24' prior: 50889968!
getRoot

	parentPortfolio ifNil:[
		^self.
	].

	^parentPortfolio getRoot! !

!classDefinition: #PorfolioNil category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 20:48:52'!
Object subclass: #PorfolioNil
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'fp 11/28/2021 20:48:47' prior: 50889231 overrides: 16896425!
initialize
	
	accounts := OrderedCollection new.
	parentPortfolio := PorfolioNil with: self.! !
!PorfolioNil class methodsFor: 'no messages' stamp: 'fp 11/28/2021 20:49:42'!
with: aPorfolio
	^self new initializeWith: aPorfolio.! !

!classDefinition: #PorfolioNil category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 20:50:22'!
Object subclass: #PorfolioNil
	instanceVariableNames: 'son'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!PorfolioNil methodsFor: 'no messages' stamp: 'fp 11/28/2021 20:50:20'!
initializeWith: aPortfolio
	son := aPortfolio ! !
!PorfolioNil methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 20:50:35'!
getRoot
	^son! !
!Portfolio methodsFor: 'private' stamp: 'fp 11/28/2021 20:50:40' prior: 50890044!
getRoot

	^parentPortfolio getRoot! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 20:50:41'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 20:50:41'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 20:50:41'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 20:50:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 20:50:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 20:50:41'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 20:50:41'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 20:50:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 20:50:41'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 20:50:41'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 20:50:41'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 20:50:41'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 20:50:41'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/28/2021 20:50:41'!
PASSED!

Portfolio subclass: #PorfolioNil
	instanceVariableNames: 'son'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #PorfolioNil category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 20:51:44'!
Portfolio subclass: #PorfolioNil
	instanceVariableNames: 'son'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

p:= PorfolioNil new.
p addAccount: account1!

Object subclass: #PorfolioNil
	instanceVariableNames: 'son'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #PorfolioNil category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 20:54:16'!
Object subclass: #PorfolioNil
	instanceVariableNames: 'son'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!Portfolio methodsFor: 'private' stamp: 'fp 11/28/2021 20:58:48' prior: 50889253!
setParent: aPortfolio

	parentPortfolio := aPortfolio ! !
!Portfolio methodsFor: 'associating' stamp: 'fp 11/28/2021 21:00:59' prior: 50889974!
addAccount: anAccount 

	(self getRoot hasAccount: anAccount ) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self hasAccount: anAccount) ifTrue: [
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self = anAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].

	(anAccount isKindOf: Portfolio) ifTrue: [
		anAccount setParent: self.
	].

	accounts add: anAccount.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 21:01:00'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 21:01:00'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 21:01:00'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 21:01:00'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 21:01:00'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 21:01:00'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 21:01:00'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 21:01:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 21:01:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 21:01:00'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 21:01:00'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 21:01:00'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 21:01:00'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/28/2021 21:01:00'!
PASSED!
!Portfolio methodsFor: 'associating' stamp: 'fp 11/28/2021 21:01:42' prior: 50890175!
addAccount: anAccount 

	(self getRoot hasAccount: anAccount ) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self hasAccount: anAccount) ifTrue: [
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self = anAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].

	anAccount setParent: self.

	accounts add: anAccount.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 21:01:43'!
ERROR!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 21:01:43'!
ERROR!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 21:01:43'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 21:01:43'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 21:01:43'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 21:01:43'!
ERROR!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 21:01:43'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 21:01:43'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 21:01:43'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 21:01:43'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 21:01:43'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 21:01:43'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/28/2021 21:01:43'!
ERROR!

!classDefinition: #ReceptiveAccount category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 21:02:13'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 21:02:15'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parentPortfolio aPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!ReceptiveAccount methodsFor: 'main protocol' stamp: 'fp 11/28/2021 21:02:10'!
setParent: aParent

	parentPortfolio := aPortfolio ! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'fp 11/28/2021 21:03:06' prior: 50880949 overrides: 16896425!
initialize

	parentPortfolio := PorfolioNil new.
	transactions := OrderedCollection new.! !

Object subclass: #PortfolioNil
	instanceVariableNames: 'son'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #PortfolioNil category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 21:03:46'!
Object subclass: #PortfolioNil
	instanceVariableNames: 'son'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'fp 11/28/2021 21:04:02' prior: 50890058 overrides: 16896425!
initialize
	
	accounts := OrderedCollection new.
	parentPortfolio := PortfolioNil with: self.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'fp 11/28/2021 21:04:07' prior: 50890337 overrides: 16896425!
initialize

	parentPortfolio := PortfolioNil new.
	transactions := OrderedCollection new.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/28/2021 21:04:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 21:04:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 21:04:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/28/2021 21:04:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/28/2021 21:04:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/28/2021 21:04:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/28/2021 21:04:12'!
PASSED!

!testRun: #TransferTest #test01OnTransferDestinationAccountBalanceIncreasesAndOriginAccountBalanceDecreases stamp: 'fp 11/28/2021 21:04:12'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 21:04:12'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/28/2021 21:04:12'!
PASSED!

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 11/28/2021 21:04:12'!
PASSED!

!testRun: #TransferTest #test05CannotTransferZero stamp: 'fp 11/28/2021 21:04:12'!
PASSED!

!classRemoval: #PorfolioNil stamp: 'fp 11/28/2021 21:04:23'!
Object subclass: #PorfolioNil
	instanceVariableNames: 'son'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/28/2021 21:04:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 21:04:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 21:04:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/28/2021 21:04:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/28/2021 21:04:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/28/2021 21:04:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/28/2021 21:04:28'!
PASSED!

!testRun: #TransferTest #test01OnTransferDestinationAccountBalanceIncreasesAndOriginAccountBalanceDecreases stamp: 'fp 11/28/2021 21:04:28'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 21:04:28'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/28/2021 21:04:28'!
PASSED!

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 11/28/2021 21:04:28'!
PASSED!

!testRun: #TransferTest #test05CannotTransferZero stamp: 'fp 11/28/2021 21:04:28'!
PASSED!
!ReceptiveAccount methodsFor: 'main protocol' stamp: 'fp 11/28/2021 21:05:13' prior: 50890331!
setParent: aParent

	parentPortfolio := aParent ! !

Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 21:05:28'!
Object subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/28/2021 21:05:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 21:05:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 21:05:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/28/2021 21:05:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/28/2021 21:05:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/28/2021 21:05:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/28/2021 21:05:32'!
PASSED!

!testRun: #TransferTest #test01OnTransferDestinationAccountBalanceIncreasesAndOriginAccountBalanceDecreases stamp: 'fp 11/28/2021 21:05:32'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 21:05:32'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/28/2021 21:05:32'!
PASSED!

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 11/28/2021 21:05:32'!
PASSED!

!testRun: #TransferTest #test05CannotTransferZero stamp: 'fp 11/28/2021 21:05:32'!
PASSED!
!Portfolio methodsFor: 'associating' stamp: 'fp 11/28/2021 21:06:17' prior: 50890245!
addAccount: anAccount 

	(self getRoot hasAccount: anAccount ) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self hasAccount: anAccount) ifTrue: [
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self = anAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].



	accounts add: anAccount.! !
!Portfolio methodsFor: 'associating' stamp: 'fp 11/28/2021 21:06:26' prior: 50890527!
addAccount: anAccount 

	(self getRoot hasAccount: anAccount ) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self hasAccount: anAccount) ifTrue: [
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self = anAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].

	anAccount setParent: self.

	accounts add: anAccount.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'fp 11/28/2021 21:07:30' prior: 50890364 overrides: 16896425!
initialize

	parentPortfolio := PortfolioNil with: self.
	transactions := OrderedCollection new.! !
!PortfolioNil class methodsFor: 'no messages' stamp: 'fp 11/28/2021 21:08:31'!
with: anAccount
	^self new initializeWith: anAccount.! !
!PortfolioNil methodsFor: 'no messages' stamp: 'fp 11/28/2021 21:09:05'!
initializeWith: anAccount

	son := anAccount.! !
!PortfolioNil methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:09:14'!
getRoot

	^ son.! !
!PortfolioNil methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:09:16' prior: 50890575!
getRoot

	^son.! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 21:09:20'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 21:09:20'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 21:09:20'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 21:09:20'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 21:09:20'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 21:09:20'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 21:09:20'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 21:09:20'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 21:09:20'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 21:09:20'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 21:09:20'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 21:09:20'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 21:09:20'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/28/2021 21:09:20'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #TransferTest #test01OnTransferDestinationAccountBalanceIncreasesAndOriginAccountBalanceDecreases stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 11/28/2021 21:09:25'!
PASSED!

!testRun: #TransferTest #test05CannotTransferZero stamp: 'fp 11/28/2021 21:09:25'!
PASSED!
!Portfolio methodsFor: 'associating' stamp: 'fp 11/28/2021 21:09:57' prior: 50890542!
addAccount: anAccount 

	(self getRoot hasAccount: anAccount) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self hasAccount: anAccount) ifTrue: [
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self = anAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].

	anAccount setParent: self.

	accounts add: anAccount.! !
!Portfolio methodsFor: 'associating' stamp: 'fp 11/28/2021 21:11:04' prior: 50890731!
addAccount: anAccount 

	self validateAccount: anAccount.
	
	anAccount setParent: self.

	accounts add: anAccount.! !
!Portfolio methodsFor: 'associating' stamp: 'fp 11/28/2021 21:11:15'!
validateAccount: anAccount 

	(self getRoot hasAccount: anAccount) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self hasAccount: anAccount) ifTrue: [
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self = anAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].
! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 21:11:16'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 21:11:17'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 21:11:17'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 21:11:17'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 21:11:17'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 21:11:17'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 21:11:17'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 21:11:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 21:11:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 21:11:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 21:11:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 21:11:17'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 21:11:17'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/28/2021 21:11:17'!
PASSED!

Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #Account category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 21:12:47'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

Account subclass: #Portfolio
	instanceVariableNames: 'accounts parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #Portfolio category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 21:12:57'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!

!classDefinition: #ReceptiveAccount category: 'ServiciosFinancieros-Ejercicio' stamp: 'fp 11/28/2021 21:13:09'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions parentPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio'!
!Account methodsFor: 'nil' stamp: 'fp 11/28/2021 21:14:27'!
balance
	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:15:02'!
hasRegistered: aTransaction
	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:15:15'!
parentPortfolio
	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:15:20' prior: 50890869!
parentPortfolio

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:15:24' prior: 50890864!
hasRegistered: aTransaction

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:15:27' prior: 50890860!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:15:51' prior: 50890874!
parentPortfolio

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:16:10'!
setParent: aParent

	self subclassResponsibility ! !
!Account methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:16:19'!
transactions

	self subclassResponsibility ! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #TransferTest #test01OnTransferDestinationAccountBalanceIncreasesAndOriginAccountBalanceDecreases stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 11/28/2021 21:16:37'!
PASSED!

!testRun: #TransferTest #test05CannotTransferZero stamp: 'fp 11/28/2021 21:16:37'!
PASSED!
!Account methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:18:13'!
mmmm

	self subclassResponsibility ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:18:20' overrides: 50890998!
mmmm

	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:18:20' overrides: 50890998!
mmmm

	self subclassResponsibility ! !

!methodRemoval: Account #mmmm stamp: 'fp 11/28/2021 21:18:20'!
mmmm

	self subclassResponsibility !
!Account methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:18:26'!
mmmm

	self subclassResponsibility ! !

!methodRemoval: Portfolio #mmmm stamp: 'fp 11/28/2021 21:18:51'!
mmmm

	self subclassResponsibility !
!Portfolio methodsFor: 'private' stamp: 'fp 11/28/2021 21:19:04' overrides: 50891015!
mmmm

	self subclassResponsibility ! !

!methodRemoval: Portfolio #mmmm stamp: 'fp 11/28/2021 21:20:19'!
mmmm

	self subclassResponsibility !

!methodRemoval: ReceptiveAccount #mmmm stamp: 'fp 11/28/2021 21:20:21'!
mmmm

	self subclassResponsibility !
!Account methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:20:32'!
mmmm: anAccount

	self subclassResponsibility ! !

!methodRemoval: Account #mmmm stamp: 'fp 11/28/2021 21:20:37'!
mmmm

	self subclassResponsibility !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:20:45' overrides: 50891034!
mmmm: anAccount

	self subclassResponsibility ! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:20:45' overrides: 50891034!
mmmm: anAccount

	self subclassResponsibility ! !

!methodRemoval: Account #mmmm: stamp: 'fp 11/28/2021 21:20:45'!
mmmm: anAccount

	self subclassResponsibility !
!Account methodsFor: 'as yet unclassified' stamp: 'fp 11/28/2021 21:20:59'!
mmmm: anAccount

	self subclassResponsibility ! !

----QUIT----(28 November 2021 21:22:53) CuisUniversity-4532.image priorSource: 17862217!

----STARTUP---- (29 November 2021 17:21:28) as /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/CuisUniversity-4532.image!

!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 17:31:33' prior: 50889781!
hasAccount: aReceptiveAccount 

	accounts do: [:anAccount|
		
		(anAccount isKindOf: Portfolio) ifTrue: [
			((anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
		(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
			((aReceptiveAccount hasAccount: anAccount ) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		]
	].

	^accounts includes: aReceptiveAccount.! !

----End fileIn of /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/grupo/CodigoRepetido-Ejercicio.st----!

----End fileIn of /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/grupo/Ejercicio1-PNJ-Episodio2.st----!

----End fileIn of /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/grupo/Mars-Rover-Exercise.st----!

----End fileIn of /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/grupo/Numeros-Parte2-Ejercicio.st----!

----End fileIn of /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/grupo/Stack-Exercise.st----!
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 17:36:34' prior: 50891067!
hasAccount: aReceptiveAccount 

	accounts do: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue: [
			((anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
		(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
			((aReceptiveAccount hasAccount: anAccount ) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
		(anAccount = aReceptiveAccount ) ifTrue:[^true]
	].

^false! !
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 17:36:42' prior: 50894426!
hasAccount: aReceptiveAccount 

	accounts do: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue: [
			((anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
		(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
			((aReceptiveAccount hasAccount: anAccount ) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
		(anAccount = aReceptiveAccount ) ifTrue:[^true]
	].

	^false! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/29/2021 17:36:43'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/29/2021 17:36:43'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/29/2021 17:36:43'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/29/2021 17:36:43'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/29/2021 17:36:43'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/29/2021 17:36:43'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/29/2021 17:36:43'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/29/2021 17:36:43'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/29/2021 17:36:43'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/29/2021 17:36:43'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/29/2021 17:36:43'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/29/2021 17:36:43'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/29/2021 17:36:43'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/29/2021 17:36:43'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 17:38:12' prior: 50894442!
hasAccount: aReceptiveAccount 

	accounts anySatisfy: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue: [
			((anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
		(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
			((aReceptiveAccount hasAccount: anAccount ) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
		(anAccount = aReceptiveAccount ) ifTrue:[^true]
	].
! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/29/2021 17:38:12'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/29/2021 17:38:12'!
ERROR!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/29/2021 17:38:12'!
ERROR!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/29/2021 17:38:12'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/29/2021 17:38:12'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/29/2021 17:38:12'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/29/2021 17:38:12'!
ERROR!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/29/2021 17:38:12'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/29/2021 17:38:12'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/29/2021 17:38:12'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/29/2021 17:38:12'!
FAILURE!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/29/2021 17:38:12'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/29/2021 17:38:12'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/29/2021 17:38:12'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 17:38:19' prior: 50894511!
hasAccount: aReceptiveAccount 

	^accounts anySatisfy: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue: [
			((anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
		(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
			((aReceptiveAccount hasAccount: anAccount ) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
		(anAccount = aReceptiveAccount ) ifTrue:[^true]
	].
! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/29/2021 17:38:19'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/29/2021 17:38:19'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/29/2021 17:38:19'!
ERROR!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/29/2021 17:38:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/29/2021 17:38:19'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/29/2021 17:38:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/29/2021 17:38:19'!
ERROR!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/29/2021 17:38:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/29/2021 17:38:19'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/29/2021 17:38:19'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/29/2021 17:38:19'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/29/2021 17:38:19'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/29/2021 17:38:19'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/29/2021 17:38:19'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 17:39:04' prior: 50894579!
hasAccount: aReceptiveAccount 

	^accounts anySatisfy: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue: [
			((anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount])ifTrue:[true]
		].
		(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
			((aReceptiveAccount hasAccount: anAccount ) or: [anAccount == aReceptiveAccount])ifTrue:[true]
		].
		(anAccount = aReceptiveAccount ) ifTrue:[true]
	].
! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/29/2021 17:39:05'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/29/2021 17:39:05'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/29/2021 17:39:05'!
ERROR!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/29/2021 17:39:05'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/29/2021 17:39:05'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/29/2021 17:39:05'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/29/2021 17:39:05'!
ERROR!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/29/2021 17:39:05'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/29/2021 17:39:05'!
FAILURE!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/29/2021 17:39:05'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/29/2021 17:39:05'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/29/2021 17:39:05'!
FAILURE!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/29/2021 17:39:05'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/29/2021 17:39:05'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 17:40:01' prior: 50894648!
hasAccount: aReceptiveAccount 

	^accounts anySatisfy: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue: [
			((anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
		(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
			((aReceptiveAccount hasAccount: anAccount ) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
		(anAccount = aReceptiveAccount ) ifTrue:[^true]
		^false
	].
! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/29/2021 17:40:01'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/29/2021 17:40:01'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/29/2021 17:40:01'!
ERROR!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/29/2021 17:40:01'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/29/2021 17:40:01'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/29/2021 17:40:01'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/29/2021 17:40:01'!
ERROR!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/29/2021 17:40:01'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/29/2021 17:40:01'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/29/2021 17:40:01'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/29/2021 17:40:01'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/29/2021 17:40:01'!
ERROR!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/29/2021 17:40:01'!
ERROR!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/29/2021 17:40:01'!
ERROR!
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 17:40:10' prior: 50894717!
hasAccount: aReceptiveAccount 

	^accounts anySatisfy: [:anAccount|
		(anAccount isKindOf: Portfolio) ifTrue: [
			((anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
		(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
			((aReceptiveAccount hasAccount: anAccount ) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
		(anAccount = aReceptiveAccount ) ifTrue:[^true].
		^false.
	].
! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/29/2021 17:40:10'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/29/2021 17:40:10'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/29/2021 17:40:10'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/29/2021 17:40:10'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/29/2021 17:40:10'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/29/2021 17:40:10'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/29/2021 17:40:10'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/29/2021 17:40:10'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/29/2021 17:40:10'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/29/2021 17:40:10'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/29/2021 17:40:10'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/29/2021 17:40:10'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/29/2021 17:40:10'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/29/2021 17:40:10'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'fp 11/29/2021 17:59:35' prior: 50891042 overrides: 50891055!
mmmm: anAccount
	
	^((self hasAccount: anAccount) or: [self == anAccount])
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'fp 11/29/2021 18:00:16' prior: 50891047 overrides: 50891055!
mmmm: anAccount

	^((anAccount hasAccount: self) or: [self == anAccount])! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'fp 11/29/2021 18:09:10' prior: 50894856 overrides: 50891055!
mmmm: anAccount
	
	^((self == anAccount) or: [(self hasAccount: anAccount) or: [anAccount hasAccount:self ]])
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'fp 11/29/2021 18:09:28' prior: 50894869 overrides: 50891055!
mmmm: anAccount
	
	^((self == anAccount) or: [
		(self hasAccount: anAccount) or: [
			anAccount hasAccount:self 
			]
		]
	)
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'fp 11/29/2021 18:09:43' prior: 50894863 overrides: 50891055!
mmmm: anAccount

	^((self == anAccount) or: [anAccount hasAccount: self])! !
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 18:10:11' prior: 50894786!
hasAccount: aReceptiveAccount 

	^accounts anySatisfy: [:anAccount|
		^anAccount mmmm: aReceptiveAccount.
		
		"(anAccount isKindOf: Portfolio) ifTrue: [
			((anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
	
		(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
			((aReceptiveAccount hasAccount: anAccount ) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
	
		(anAccount = aReceptiveAccount ) ifTrue:[^true].
		^false."
	].
! !
!PortfolioNil methodsFor: 'as yet unclassified' stamp: 'fp 11/29/2021 18:11:52'!
getRootPorfolio

	^son.! !
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 18:11:52'!
getRootPorfolio

	^parentPortfolio getRoot! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'fp 11/29/2021 18:11:52' prior: 50890753!
validateAccount: anAccount 

	(self getRootPorfolio hasAccount: anAccount) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self hasAccount: anAccount) ifTrue: [
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	(self = anAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'fp 11/29/2021 18:11:52' prior: 50890086!
getRoot

	^parentPortfolio getRootPorfolio! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'fp 11/29/2021 18:11:52' prior: 50894911!
getRootPorfolio

	^parentPortfolio getRootPorfolio! !

!methodRemoval: PortfolioNil #getRoot stamp: 'fp 11/29/2021 18:11:52'!
getRoot

	^son.!

!methodRemoval: Portfolio #getRoot stamp: 'fp 11/29/2021 18:11:52'!
getRoot

	^parentPortfolio getRootPorfolio!
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 18:13:10' prior: 50894890!
hasAccount: anAccountToAdd 

	^accounts anySatisfy: [:anAccount|
		^anAccount mmmm: anAccountToAdd.
		
		"(anAccount isKindOf: Portfolio) ifTrue: [
			((anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
	
		(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
			((aReceptiveAccount hasAccount: anAccount ) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
	
		(anAccount = aReceptiveAccount ) ifTrue:[^true].
		^false."
	].
! !
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 18:13:19' prior: 50894947!
hasAccount: anAccountToAdd 

	^accounts anySatisfy: [:eachAccount|
		^eachAccount mmmm: anAccountToAdd.
		
		"(anAccount isKindOf: Portfolio) ifTrue: [
			((anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
	
		(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
			((aReceptiveAccount hasAccount: anAccount ) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
	
		(anAccount = aReceptiveAccount ) ifTrue:[^true].
		^false."
	].
! !
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 18:13:26' prior: 50894965!
hasAccount: anAccount 

	^accounts anySatisfy: [:eachAccount|
		^eachAccount mmmm: anAccount.
		
		"(anAccount isKindOf: Portfolio) ifTrue: [
			((anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
	
		(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
			((aReceptiveAccount hasAccount: anAccount ) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
	
		(anAccount = aReceptiveAccount ) ifTrue:[^true].
		^false."
	].
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'fp 11/29/2021 18:17:22' prior: 50894885 overrides: 50891055!
mmmm: anAccount

	(anAccount isKindOf: Portfolio) ifTrue: [
		^(anAccount hasAccount: self)
	].
	^(self == anAccount)! !
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 18:18:49' prior: 50894983!
hasAccount: anAccount 

	^accounts anySatisfy: [:eachAccount|
		eachAccount mmmm: anAccount
		
		"(anAccount isKindOf: Portfolio) ifTrue: [
			((anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
	
		(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
			((aReceptiveAccount hasAccount: anAccount ) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
	
		(anAccount = aReceptiveAccount ) ifTrue:[^true].
		^false."
	].
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'fp 11/29/2021 18:21:03' prior: 50894877 overrides: 50891055!
mmmm: anAccount
	
	^((self == anAccount) or: [
		(self hasAccount: anAccount) or: [
			anAccount hasAccount: self 
			]
		]
	)
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/29/2021 18:21:07'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/29/2021 18:21:07'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/29/2021 18:21:07'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/29/2021 18:21:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/29/2021 18:21:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/29/2021 18:21:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/29/2021 18:21:07'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/29/2021 18:21:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/29/2021 18:21:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/29/2021 18:21:07'!
ERROR!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/29/2021 18:21:07'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/29/2021 18:21:07'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/29/2021 18:21:07'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/29/2021 18:21:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/29/2021 18:21:07'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'fp 11/29/2021 18:21:58' prior: 50895028 overrides: 50891055!
mmmm: anAccount
	
	^((self == anAccount) or: [
		(self hasAccount: anAccount) or: [
			(anAccount isKindOf: Portfolio) ifTrue: [
				^(anAccount hasAccount: self)
			].
			]
		]
	)
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/29/2021 18:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/29/2021 18:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/29/2021 18:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/29/2021 18:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/29/2021 18:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/29/2021 18:22:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/29/2021 18:22:06'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'fp 11/29/2021 18:25:36'!
hasAccount: anAccount
	^false! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'fp 11/29/2021 18:25:48' prior: 50895092 overrides: 50891055!
mmmm: anAccount
	
	^((self == anAccount) or: [
		(self hasAccount: anAccount) or: [
				^(anAccount hasAccount: self)
			]
		]
	)
	! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/29/2021 18:25:49'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/29/2021 18:25:49'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/29/2021 18:25:49'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/29/2021 18:25:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/29/2021 18:25:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/29/2021 18:25:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/29/2021 18:25:49'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/29/2021 18:25:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/29/2021 18:25:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/29/2021 18:25:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/29/2021 18:25:49'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/29/2021 18:25:49'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/29/2021 18:25:49'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/29/2021 18:25:49'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'fp 11/29/2021 18:09:43' prior: 50895002 overrides: 50891055!
mmmm: anAccount

	^((self == anAccount) or: [anAccount hasAccount: self])! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 11/29/2021 18:26:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 11/29/2021 18:26:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 11/29/2021 18:26:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 11/29/2021 18:26:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 11/29/2021 18:26:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 11/29/2021 18:26:24'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 11/29/2021 18:26:24'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'fp 11/29/2021 18:26:30' prior: 50895127!
hasAccount: anAccount

	^false! !
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 18:43:56' prior: 50894916!
validateAccount: anAccount 

	(self getRootPorfolio hasAccount: anAccount) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	"(self hasAccount: anAccount) ifTrue: [
		self error: self class accountAlreadyRegisteredErrorDescription
	]."

	(self = anAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].
! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/29/2021 18:43:56'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/29/2021 18:43:56'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/29/2021 18:43:56'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/29/2021 18:43:56'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/29/2021 18:43:56'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/29/2021 18:43:56'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/29/2021 18:43:56'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/29/2021 18:43:56'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/29/2021 18:43:56'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/29/2021 18:43:56'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/29/2021 18:43:56'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/29/2021 18:43:56'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/29/2021 18:43:56'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/29/2021 18:43:56'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 18:48:29' prior: 50895009!
hasAccount: anAccount 

	^accounts anySatisfy: [:eachAccount|
		"eachAccount mmmm: anAccount"
		^((eachAccount == anAccount) or: [
			(eachAccount hasAccount: anAccount) or: [
					^(anAccount hasAccount: eachAccount)
				]
			]
		)
	
		"(anAccount isKindOf: Portfolio) ifTrue: [
			((anAccount hasAccount: aReceptiveAccount) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
	
		(aReceptiveAccount isKindOf: Portfolio) ifTrue: [
			((aReceptiveAccount hasAccount: anAccount ) or: [anAccount == aReceptiveAccount])ifTrue:[^true]
		].
	
		(anAccount = aReceptiveAccount ) ifTrue:[^true].
		^false."
	].
! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/29/2021 18:48:34'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/29/2021 18:48:34'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/29/2021 18:48:34'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/29/2021 18:48:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/29/2021 18:48:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/29/2021 18:48:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/29/2021 18:48:34'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/29/2021 18:48:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/29/2021 18:48:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/29/2021 18:48:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/29/2021 18:48:34'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/29/2021 18:48:34'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/29/2021 18:48:34'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/29/2021 18:48:34'!
PASSED!
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 18:49:47' prior: 50895230!
validateAccount: anAccount 

	(self = anAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].

	(self getRootPorfolio hasAccount: anAccount) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].

	"(self hasAccount: anAccount) ifTrue: [
		self error: self class accountAlreadyRegisteredErrorDescription
	]."

! !

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 11/29/2021 18:49:49'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 11/29/2021 18:49:49'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 11/29/2021 18:49:49'!
PASSED!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 11/29/2021 18:49:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 11/29/2021 18:49:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 11/29/2021 18:49:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 11/29/2021 18:49:49'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 11/29/2021 18:49:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 11/29/2021 18:49:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 11/29/2021 18:49:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 11/29/2021 18:49:49'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 11/29/2021 18:49:49'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 11/29/2021 18:49:49'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 11/29/2021 18:49:49'!
PASSED!

!methodRemoval: ReceptiveAccount #mmmm: stamp: 'fp 11/29/2021 18:52:37'!
mmmm: anAccount

	^((self == anAccount) or: [anAccount hasAccount: self])!
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 18:52:50' prior: 50895297!
hasAccount: anAccount 

	^accounts anySatisfy: [:eachAccount|
		^((eachAccount == anAccount) or: [
			(eachAccount hasAccount: anAccount) or: [
					^(anAccount hasAccount: eachAccount)
				]
			]
		)
	].
! !
!Portfolio methodsFor: 'private' stamp: 'fp 11/29/2021 18:52:57' prior: 50895371!
validateAccount: anAccount 

	(self = anAccount) ifTrue: [
		self error: self class invalidPortfolioErrorDescription 
	].

	(self getRootPorfolio hasAccount: anAccount) ifTrue:[
		self error: self class accountAlreadyRegisteredErrorDescription
	].
! !

!methodRemoval: Portfolio #mmmm: stamp: 'fp 11/29/2021 18:55:11'!
mmmm: anAccount
	
	^((self == anAccount) or: [
		(self hasAccount: anAccount) or: [
				^(anAccount hasAccount: self)
			]
		]
	)
	!

!methodRemoval: Account #mmmm: stamp: 'fp 11/29/2021 18:56:39'!
mmmm: anAccount

	self subclassResponsibility !

----QUIT----(29 November 2021 19:01:23) CuisUniversity-4532.image priorSource: 17901073!

----STARTUP---- (29 November 2021 19:23:09) as /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/CuisUniversity-4532.image!


----QUIT----(29 November 2021 19:23:55) CuisUniversity-4532.image priorSource: 18042292!

----STARTUP---- (29 November 2021 19:44:01) as /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/CuisUniversity-4532.image!


----SNAPSHOT----(29 November 2021 19:44:27) CuisUniversity-4532.image priorSource: 18042544!

----QUIT----(29 November 2021 19:44:29) CuisUniversity-4532.image priorSource: 18042796!

----STARTUP---- (11 December 2021 18:29:59) as /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/CuisUniversity-4532.image!


----QUIT----(11 December 2021 18:30:42) CuisUniversity-4532.image priorSource: 18042890!

----STARTUP---- (12 December 2021 16:36:44) as /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/CuisUniversity-4532.image!


----QUIT----(12 December 2021 16:37:01) CuisUniversity-4532.image priorSource: 18043142!

----STARTUP---- (13 December 2021 15:56:58) as /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/CuisUniversity-4532.image!


----End fileIn of /home/facupri/Documentos/TDDBabyStepsGame.st----!

game := TDDBabyStepsGameContador new.!

game definition!

gameView := game start.!

!classDefinition: #TDDBabyStepsContadorTest category: 'TDDBabyStepsGameContador' stamp: 'fp 12/13/2021 16:21:09'!
TestCase subclass: #TDDBabyStepsContadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!classDefinition: #Contador category: 'TDDBabyStepsGameContador' stamp: 'fp 12/13/2021 16:21:09'!
TestCase subclass: #Contador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

gameView next!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'fp 12/13/2021 16:21:42'!
test01UnNuevoContadorEmpiezaConValorCero

	| contador |
	contador := Contador new.
	self assert: 0 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'fp 12/13/2021 16:21:42'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'fp 12/13/2021 16:22:45'!
ERROR!
!Contador methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:23:01'!
valor
	self shouldBeImplemented.! !
!Contador methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:23:12' prior: 50897354!
valor
	^0.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'fp 12/13/2021 16:23:14'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'fp 12/13/2021 16:23:14'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'fp 12/13/2021 16:23:18'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'fp 12/13/2021 16:23:18'!
PASSED!

gameView next!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'fp 12/13/2021 16:23:21'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'fp 12/13/2021 16:23:21'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |
	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'fp 12/13/2021 16:23:21'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'fp 12/13/2021 16:27:33'!
ERROR!
!Contador methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:27:39'!
incrementar
	self shouldBeImplemented.! !

!classDefinition: #Contador category: 'TDDBabyStepsGameContador' stamp: 'fp 12/13/2021 16:28:23'!
TestCase subclass: #Contador
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!
!Contador methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:28:21' prior: 50897398!
incrementar
	valor := 1! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'fp 12/13/2021 16:28:30'!
FAILURE!
!Contador methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:28:58' overrides: 16896425!
initialize
	valor:=0.! !
!Contador methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:29:04' prior: 50897359!
valor
	^valor.! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'fp 12/13/2021 16:29:12'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'fp 12/13/2021 16:29:12'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'fp 12/13/2021 16:29:12'!
PASSED!

gameView next!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'fp 12/13/2021 16:29:16'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'fp 12/13/2021 16:29:16'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'fp 12/13/2021 16:29:16'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |
	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'fp 12/13/2021 16:29:16'!
FAILURE!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'fp 12/13/2021 16:29:23'!
FAILURE!
!Contador methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:29:54' prior: 50897410!
incrementar
	valor := valor + 1! !

gameView next!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'fp 12/13/2021 16:31:01'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'fp 12/13/2021 16:31:01'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'fp 12/13/2021 16:31:01'!
PASSED!

game := TDDBabyStepsGameAhorcadoPerdiendo new.
game definition.
gameView := game start.!

!classDefinition: #TDDBabyStepsAhorcadoPerdiendoTest category: 'TDDBabyStepsGameAhorcadoPerdiendo' stamp: 'fp 12/13/2021 16:31:59'!
TestCase subclass: #TDDBabyStepsAhorcadoPerdiendoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoPerdiendo'!

!classDefinition: #AhorcadoPerdiendo category: 'TDDBabyStepsGameAhorcadoPerdiendo' stamp: 'fp 12/13/2021 16:31:59'!
TestCase subclass: #AhorcadoPerdiendo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoPerdiendo'!

----QUIT----(13 December 2021 16:32:06) CuisUniversity-4532.image priorSource: 18043394!

----STARTUP---- (13 December 2021 16:32:12) as /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/CuisUniversity-4532.image!


gameView next!
!TDDBabyStepsAhorcadoPerdiendoTest methodsFor: 'tests' stamp: 'fp 12/13/2021 16:33:00'!
test01PuedoPedirLaPalabraAAdivinar

	| ahorcado |
	ahorcado := AhorcadoPerdiendo paraPalabra: 'starbucks'.
	
	self assert: ahorcado vidasRestantes equals: 5.
	self assert: ahorcado palabraAAdivinar equals: (OrderedCollection newFrom: #($_ $_ $_ $_ $_ $_ $_ $_ $_)).
	self assert: ahorcado letrasErradas equals: Set new.! !

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:33:00'!
ERROR!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:33:55'!
ERROR!
!AhorcadoPerdiendo class methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:34:21'!
paraPalabra: aString 
	self shouldBeImplemented.! !
!AhorcadoPerdiendo class methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:35:37' prior: 50897535!
paraPalabra: unaPalabra 
	self new initializeParaPalabra: unaPalabra.! !

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:35:42'!
ERROR!

!classDefinition: #AhorcadoPerdiendo category: 'TDDBabyStepsGameAhorcadoPerdiendo' stamp: 'fp 12/13/2021 16:35:52'!
TestCase subclass: #AhorcadoPerdiendo
	instanceVariableNames: 'unaPalabra_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoPerdiendo'!
!AhorcadoPerdiendo methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:35:52'!
initializeParaPalabra: unaPalabra 
	self shouldBeImplemented.
	unaPalabra_CHANGE_ME := unaPalabra.! !

!classDefinition: #AhorcadoPerdiendo category: 'TDDBabyStepsGameAhorcadoPerdiendo' stamp: 'fp 12/13/2021 16:36:22'!
TestCase subclass: #AhorcadoPerdiendo
	instanceVariableNames: 'unaPalabra_CHANGE_ME palabra'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoPerdiendo'!
!AhorcadoPerdiendo methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:36:20' prior: 50897560!
initializeParaPalabra: unaPalabra 
	
	palabra := unaPalabra.
	! !

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:36:25'!
ERROR!
!AhorcadoPerdiendo class methodsFor: 'as yet unclassified' stamp: 'fp 12/13/2021 16:36:32'!
vidasRestantes
	self shouldBeImplemented.! !

!methodRemoval: AhorcadoPerdiendo class #vidasRestantes stamp: 'fp 12/13/2021 16:38:04'!
vidasRestantes
	self shouldBeImplemented.!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:38:21'!
ERROR!
!AhorcadoPerdiendo class methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:38:54' prior: 50897541!
paraPalabra: unaPalabra 
	^self new initializeParaPalabra: unaPalabra.! !

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:38:59'!
ERROR!
!AhorcadoPerdiendo methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:39:05'!
vidasRestantes
	self shouldBeImplemented.! !
!AhorcadoPerdiendo methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:39:09' prior: 50897607!
vidasRestantes
	^5! !

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:39:11'!
ERROR!
!AhorcadoPerdiendo methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:39:37'!
palabraAAdivinar
	self shouldBeImplemented.! !
!AhorcadoPerdiendo methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:39:56' prior: 50897620!
palabraAAdivinar
	^(OrderedCollection newFrom: #($_ $_ $_ $_ $_ $_ $_ $_ $_)).! !

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:39:59'!
ERROR!
!AhorcadoPerdiendo methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:40:05'!
letrasErradas
	self shouldBeImplemented.! !
!AhorcadoPerdiendo methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:40:20' prior: 50897635!
letrasErradas
	^Set new.! !

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:40:22'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:40:22'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:40:27'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:40:27'!
PASSED!

gameView next.!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:40:29'!
PASSED!
!TDDBabyStepsAhorcadoPerdiendoTest methodsFor: 'tests' stamp: 'fp 12/13/2021 16:40:29'!
test02PuedoPedirLaPalabraAAdivinar

	| ahorcado |
	ahorcado := AhorcadoPerdiendo paraPalabra: 'starbucks'.
	
	ahorcado sugerir: $l.
	
	self assert: ahorcado vidasRestantes equals: 4.
	self assert: ahorcado palabraAAdivinar equals: (OrderedCollection newFrom: #($_ $_ $_ $_ $_ $_ $_ $_ $_)).
	self assert: ahorcado letrasErradas equals: (Set with: $l).! !

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test02PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:40:29'!
ERROR!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test02PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:41:13'!
ERROR!
!AhorcadoPerdiendo methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:41:19'!
sugerir: aCharacter 
	self shouldBeImplemented.! !

!classDefinition: #AhorcadoPerdiendo category: 'TDDBabyStepsGameAhorcadoPerdiendo' stamp: 'fp 12/13/2021 16:42:14'!
TestCase subclass: #AhorcadoPerdiendo
	instanceVariableNames: 'unaPalabra_CHANGE_ME palabra letrasErradas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoPerdiendo'!

!classDefinition: #AhorcadoPerdiendo category: 'TDDBabyStepsGameAhorcadoPerdiendo' stamp: 'fp 12/13/2021 16:42:17'!
TestCase subclass: #AhorcadoPerdiendo
	instanceVariableNames: 'unaPalabra_CHANGE_ME palabra letrasErradas vidasRestantes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoPerdiendo'!
!AhorcadoPerdiendo methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:42:13' prior: 50897576!
initializeParaPalabra: unaPalabra 
	
	palabra := unaPalabra.
	letrasErradas := Set new.
	vidasRestantes := 5.! !
!AhorcadoPerdiendo methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:43:19' prior: 50897686!
sugerir: aCharacter 
	vidasRestantes := 4.
	letrasErradas add: $l.! !

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test02PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:43:22'!
ERROR!
!AhorcadoPerdiendo methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:43:39' prior: 50897640!
letrasErradas
	^letrasErradas ! !
!AhorcadoPerdiendo methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:43:46' prior: 50897612!
vidasRestantes
	^vidasRestantes ! !

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test02PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:43:51'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:43:51'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test02PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:43:51'!
PASSED!

gameView next.!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:44:00'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test02PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:44:00'!
PASSED!
!TDDBabyStepsAhorcadoPerdiendoTest methodsFor: 'tests' stamp: 'fp 12/13/2021 16:44:00'!
test03SugerirMasUnaLetraQueNoPerteneceALaPalabraRestaMasDeUnaVida

	| ahorcado |
	ahorcado := AhorcadoPerdiendo paraPalabra: 'starbucks'.
	
	ahorcado sugerir: $l.
	ahorcado sugerir: $g.
	
	self assert: ahorcado vidasRestantes equals: 3.
	self assert: ahorcado palabraAAdivinar equals: (OrderedCollection newFrom: #($_ $_ $_ $_ $_ $_ $_ $_ $_)).
	self assert: ahorcado letrasErradas equals: (Set with: $l with: $g).! !

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test03SugerirMasUnaLetraQueNoPerteneceALaPalabraRestaMasDeUnaVida stamp: 'fp 12/13/2021 16:44:00'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test03SugerirMasUnaLetraQueNoPerteneceALaPalabraRestaMasDeUnaVida stamp: 'fp 12/13/2021 16:44:22'!
FAILURE!
!AhorcadoPerdiendo methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:45:09' prior: 50897719!
sugerir: aCharacter 
	vidasRestantes := vidasRestantes - 1.
	letrasErradas add: aCharacter.! !

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test03SugerirMasUnaLetraQueNoPerteneceALaPalabraRestaMasDeUnaVida stamp: 'fp 12/13/2021 16:45:11'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:45:11'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test02PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:45:11'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test03SugerirMasUnaLetraQueNoPerteneceALaPalabraRestaMasDeUnaVida stamp: 'fp 12/13/2021 16:45:11'!
PASSED!

gameView next.!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:45:17'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test02PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:45:17'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test03SugerirMasUnaLetraQueNoPerteneceALaPalabraRestaMasDeUnaVida stamp: 'fp 12/13/2021 16:45:17'!
PASSED!
!TDDBabyStepsAhorcadoPerdiendoTest methodsFor: 'tests' stamp: 'fp 12/13/2021 16:45:17'!
test04SugerirOtraLetraQueNoPerteneceALaPalabraMasDeUnaVezRestaSoloUnaVida

	| ahorcado |
	ahorcado := AhorcadoPerdiendo paraPalabra: 'starbucks'.
	
	ahorcado sugerir: $g.
	ahorcado sugerir: $g.
	
	self assert: ahorcado vidasRestantes equals: 4.
	self assert: ahorcado palabraAAdivinar equals: (OrderedCollection newFrom: #($_ $_ $_ $_ $_ $_ $_ $_ $_)).
	self assert: ahorcado letrasErradas equals: (Set with: $g ).! !

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test04SugerirOtraLetraQueNoPerteneceALaPalabraMasDeUnaVezRestaSoloUnaVida stamp: 'fp 12/13/2021 16:45:17'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test04SugerirOtraLetraQueNoPerteneceALaPalabraMasDeUnaVezRestaSoloUnaVida stamp: 'fp 12/13/2021 16:45:45'!
FAILURE!
!AhorcadoPerdiendo methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:49:01' prior: 50897784!
sugerir: aCharacter 

	(letrasErradas includes: aCharacter )ifFalse:[
		vidasRestantes := vidasRestantes - 1.
	].
	letrasErradas add: aCharacter.! !

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test04SugerirOtraLetraQueNoPerteneceALaPalabraMasDeUnaVezRestaSoloUnaVida stamp: 'fp 12/13/2021 16:49:05'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:49:05'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test02PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:49:05'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test03SugerirMasUnaLetraQueNoPerteneceALaPalabraRestaMasDeUnaVida stamp: 'fp 12/13/2021 16:49:05'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test04SugerirOtraLetraQueNoPerteneceALaPalabraMasDeUnaVezRestaSoloUnaVida stamp: 'fp 12/13/2021 16:49:05'!
PASSED!

gameView next.!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:49:08'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test02PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:49:08'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test03SugerirMasUnaLetraQueNoPerteneceALaPalabraRestaMasDeUnaVida stamp: 'fp 12/13/2021 16:49:08'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test04SugerirOtraLetraQueNoPerteneceALaPalabraMasDeUnaVezRestaSoloUnaVida stamp: 'fp 12/13/2021 16:49:08'!
PASSED!
!TDDBabyStepsAhorcadoPerdiendoTest methodsFor: 'tests' stamp: 'fp 12/13/2021 16:49:08'!
test05SiAgotasTusVidasNoPodesSeguirJugando
	| ahorcado |
	ahorcado := AhorcadoPerdiendo paraPalabra: 'starbucks'.
	
	ahorcado sugerir: $q.
	ahorcado sugerir: $y.
	ahorcado sugerir: $o.
	ahorcado sugerir: $p.
	ahorcado sugerir: $e.
	
	self 
		should: [ ahorcado sugerir: 'x' ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: 'No podes seguir jugando porque te quedaste sin vidas'.
			self assert: ahorcado vidasRestantes equals: 0.
			self assert: ahorcado palabraAAdivinar equals: (OrderedCollection newFrom: #($_ $_ $_ $_ $_ $_ $_ $_ $_)).
			self assert: ahorcado letrasErradas equals: (Set newFrom: #( $q $y $o $p $e )).
		].
	! !

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test05SiAgotasTusVidasNoPodesSeguirJugando stamp: 'fp 12/13/2021 16:49:08'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test05SiAgotasTusVidasNoPodesSeguirJugando stamp: 'fp 12/13/2021 16:49:56'!
FAILURE!
!AhorcadoPerdiendo methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:52:59' prior: 50897848!
sugerir: aCharacter 

	(vidasRestantes = 0) ifTrue:[
		self error: 'No podes seguir jugando porque te quedaste sin vida'.
	].

	(letrasErradas includes: aCharacter )ifFalse:[
		vidasRestantes := vidasRestantes - 1.
	].
	letrasErradas add: aCharacter.! !

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test05SiAgotasTusVidasNoPodesSeguirJugando stamp: 'fp 12/13/2021 16:53:00'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test05SiAgotasTusVidasNoPodesSeguirJugando stamp: 'fp 12/13/2021 16:53:16'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test05SiAgotasTusVidasNoPodesSeguirJugando stamp: 'fp 12/13/2021 16:54:16'!
FAILURE!
!AhorcadoPerdiendo methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:55:02' prior: 50897930!
sugerir: aCharacter 

	(vidasRestantes = 0) ifTrue:[
		self error: 'No podes seguir jugando porque te quedaste sin vidas'.
	].

	(letrasErradas includes: aCharacter )ifFalse:[
		vidasRestantes := vidasRestantes - 1.
	].
	letrasErradas add: aCharacter.! !

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test05SiAgotasTusVidasNoPodesSeguirJugando stamp: 'fp 12/13/2021 16:55:17'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:55:17'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test02PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:55:17'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test03SugerirMasUnaLetraQueNoPerteneceALaPalabraRestaMasDeUnaVida stamp: 'fp 12/13/2021 16:55:17'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test04SugerirOtraLetraQueNoPerteneceALaPalabraMasDeUnaVezRestaSoloUnaVida stamp: 'fp 12/13/2021 16:55:17'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test05SiAgotasTusVidasNoPodesSeguirJugando stamp: 'fp 12/13/2021 16:55:17'!
PASSED!

gameView next.!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:55:21'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test02PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:55:21'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test03SugerirMasUnaLetraQueNoPerteneceALaPalabraRestaMasDeUnaVida stamp: 'fp 12/13/2021 16:55:21'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test04SugerirOtraLetraQueNoPerteneceALaPalabraMasDeUnaVezRestaSoloUnaVida stamp: 'fp 12/13/2021 16:55:21'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoPerdiendoTest #test05SiAgotasTusVidasNoPodesSeguirJugando stamp: 'fp 12/13/2021 16:55:21'!
PASSED!

game := TDDBabyStepsGameAhorcadoGanando new.
game definition.
gameView := game start.!

!classDefinition: #TDDBabyStepsAhorcadoGanandoTest category: 'TDDBabyStepsGameAhorcadoGanando' stamp: 'fp 12/13/2021 16:55:57'!
TestCase subclass: #TDDBabyStepsAhorcadoGanandoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoGanando'!

!classDefinition: #AhorcadoGanando category: 'TDDBabyStepsGameAhorcadoGanando' stamp: 'fp 12/13/2021 16:55:57'!
TestCase subclass: #AhorcadoGanando
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoGanando'!

gameView next.!
!TDDBabyStepsAhorcadoGanandoTest methodsFor: 'tests' stamp: 'fp 12/13/2021 16:56:12'!
test01PuedoPedirLaPalabraAAdivinar

	| ahorcado |
	ahorcado := Ahorcado paraPalabra: 'starbucks'.
	
	self assert: ahorcado vidasRestantes equals: 5.
	self assert: ahorcado palabraAAdivinar equals: (OrderedCollection newFrom: #($_ $_ $_ $_ $_ $_ $_ $_ $_)).
	self assert: ahorcado letrasErradas equals: Set new.! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:56:12'!
ERROR!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:56:31'!
ERROR!
!TDDBabyStepsAhorcadoGanandoTest methodsFor: 'tests' stamp: 'fp 12/13/2021 16:56:46' prior: 50898034!
test01PuedoPedirLaPalabraAAdivinar

	| ahorcado |
	ahorcado := AhorcadoGanando paraPalabra: 'starbucks'.
	
	self assert: ahorcado vidasRestantes equals: 5.
	self assert: ahorcado palabraAAdivinar equals: (OrderedCollection newFrom: #($_ $_ $_ $_ $_ $_ $_ $_ $_)).
	self assert: ahorcado letrasErradas equals: Set new.! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:56:47'!
ERROR!

TestCase subclass: #Ahorcado
	instanceVariableNames: 'unaPalabra_CHANGE_ME palabra letrasErradas vidasRestantes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoPerdiendo'!

!classDefinition: #Ahorcado category: 'TDDBabyStepsGameAhorcadoPerdiendo' stamp: 'fp 12/13/2021 16:57:42'!
TestCase subclass: #Ahorcado
	instanceVariableNames: 'unaPalabra_CHANGE_ME palabra letrasErradas vidasRestantes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoPerdiendo'!

Ahorcado class
	instanceVariableNames: ''!

!classDefinition: 'Ahorcado class' category: 'TDDBabyStepsGameAhorcadoPerdiendo' stamp: 'fp 12/13/2021 16:57:42'!
Ahorcado class
	instanceVariableNames: ''!
!Ahorcado methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:57:42'!
initializeParaPalabra: unaPalabra 
	
	palabra := unaPalabra.
	letrasErradas := Set new.
	vidasRestantes := 5.! !
!Ahorcado methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:57:42'!
letrasErradas
	^letrasErradas ! !
!Ahorcado methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:57:42'!
palabraAAdivinar
	^(OrderedCollection newFrom: #($_ $_ $_ $_ $_ $_ $_ $_ $_)).! !
!Ahorcado methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:57:42'!
sugerir: aCharacter 

	(vidasRestantes = 0) ifTrue:[
		self error: 'No podes seguir jugando porque te quedaste sin vidas'.
	].

	(letrasErradas includes: aCharacter )ifFalse:[
		vidasRestantes := vidasRestantes - 1.
	].
	letrasErradas add: aCharacter.! !
!Ahorcado methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:57:42'!
vidasRestantes
	^vidasRestantes ! !
!Ahorcado class methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 16:57:42'!
paraPalabra: unaPalabra 
	^self new initializeParaPalabra: unaPalabra.! !
!TDDBabyStepsAhorcadoGanandoTest methodsFor: 'tests' stamp: 'fp 12/13/2021 16:57:54' prior: 50898055!
test01PuedoPedirLaPalabraAAdivinar

	| ahorcado |
	ahorcado := Ahorcado paraPalabra: 'starbucks'.
	
	self assert: ahorcado vidasRestantes equals: 5.
	self assert: ahorcado palabraAAdivinar equals: (OrderedCollection newFrom: #($_ $_ $_ $_ $_ $_ $_ $_ $_)).
	self assert: ahorcado letrasErradas equals: Set new.! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:57:55'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:57:55'!
PASSED!

gameView next.!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 16:58:14'!
PASSED!
!TDDBabyStepsAhorcadoGanandoTest methodsFor: 'tests' stamp: 'fp 12/13/2021 16:58:14'!
test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra

	| ahorcado |
	ahorcado := AhorcadoGanando paraPalabra: 'starbucks'.
	
	ahorcado sugerir: $a.
	
	self assert: ahorcado vidasRestantes equals: 5.
	self assert: ahorcado palabraAAdivinar equals: (OrderedCollection newFrom: #($_ $_ $a $_ $_ $_ $_ $_ $_)).
	self assert: ahorcado letrasErradas equals: Set new.! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 16:58:14'!
ERROR!
!TDDBabyStepsAhorcadoGanandoTest methodsFor: 'tests' stamp: 'fp 12/13/2021 16:59:08' prior: 50898156!
test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra

	| ahorcado |
	ahorcado := Ahorcado paraPalabra: 'starbucks'.
	
	ahorcado sugerir: $a.
	
	self assert: ahorcado vidasRestantes equals: 5.
	self assert: ahorcado palabraAAdivinar equals: (OrderedCollection newFrom: #($_ $_ $a $_ $_ $_ $_ $_ $_)).
	self assert: ahorcado letrasErradas equals: Set new.! !

!classRemoval: #AhorcadoGanando stamp: 'fp 12/13/2021 16:59:13'!
TestCase subclass: #AhorcadoGanando
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoGanando'!

!classRenamed: #Ahorcado as: #AhorcadoGanando stamp: 'fp 12/13/2021 16:59:21'!
Smalltalk renameClassNamed: #Ahorcado as: #AhorcadoGanando!
!TDDBabyStepsAhorcadoGanandoTest methodsFor: 'as yet unclassified' stamp: 'fp 12/13/2021 16:59:21' prior: 50898131!
test01PuedoPedirLaPalabraAAdivinar

	| ahorcado |
	ahorcado := AhorcadoGanando paraPalabra: 'starbucks'.
	
	self assert: ahorcado vidasRestantes equals: 5.
	self assert: ahorcado palabraAAdivinar equals: (OrderedCollection newFrom: #($_ $_ $_ $_ $_ $_ $_ $_ $_)).
	self assert: ahorcado letrasErradas equals: Set new.! !
!TDDBabyStepsAhorcadoGanandoTest methodsFor: 'as yet unclassified' stamp: 'fp 12/13/2021 16:59:21' prior: 50898175!
test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra

	| ahorcado |
	ahorcado := AhorcadoGanando paraPalabra: 'starbucks'.
	
	ahorcado sugerir: $a.
	
	self assert: ahorcado vidasRestantes equals: 5.
	self assert: ahorcado palabraAAdivinar equals: (OrderedCollection newFrom: #($_ $_ $a $_ $_ $_ $_ $_ $_)).
	self assert: ahorcado letrasErradas equals: Set new.! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 16:59:53'!
FAILURE!

'hello' indexOf: $o.!

'hello' indexOf: $a. !

#(1 2 3) at: 1 put: 'hello' !

t:=#(1 2 3) at: 1 put: 'hello'.
t.!

t:= OrderedCollection newFrom:#(1 2 3) .
t at: 1 put: 'hello'.
t.!

game := TDDBabyStepsGameAhorcadoGanando new.
game definition.
gameView := game start.
gameView next.!

!classDefinition: #TDDBabyStepsAhorcadoGanandoTest category: 'TDDBabyStepsGameAhorcadoGanando' stamp: 'fp 12/13/2021 17:09:50'!
TestCase subclass: #TDDBabyStepsAhorcadoGanandoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoGanando'!

!classDefinition: #AhorcadoGanando category: 'TDDBabyStepsGameAhorcadoGanando' stamp: 'fp 12/13/2021 17:09:50'!
TestCase subclass: #AhorcadoGanando
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoGanando'!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:09:50'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:09:50'!
FAILURE!

!classDefinition: #AhorcadoGanando category: 'TDDBabyStepsGameAhorcadoGanando' stamp: 'fp 12/13/2021 17:11:24'!
TestCase subclass: #AhorcadoGanando
	instanceVariableNames: 'vidasRestantes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoGanando'!

!classDefinition: #AhorcadoGanando category: 'TDDBabyStepsGameAhorcadoGanando' stamp: 'fp 12/13/2021 17:11:25'!
TestCase subclass: #AhorcadoGanando
	instanceVariableNames: 'vidasRestantes palabra'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoGanando'!

!classDefinition: #AhorcadoGanando category: 'TDDBabyStepsGameAhorcadoGanando' stamp: 'fp 12/13/2021 17:11:29'!
TestCase subclass: #AhorcadoGanando
	instanceVariableNames: 'vidasRestantes palabra letrasErradas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoGanando'!

!classDefinition: #AhorcadoGanando category: 'TDDBabyStepsGameAhorcadoGanando' stamp: 'fp 12/13/2021 17:11:32'!
TestCase subclass: #AhorcadoGanando
	instanceVariableNames: 'vidasRestantes palabra letrasErradas palabraAAdivinar'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoGanando'!
!AhorcadoGanando methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 17:11:22' prior: 50898110!
sugerir: aCharacter 

	(vidasRestantes = 0) ifTrue:[
		self error: 'No podes seguir jugando porque te quedaste sin vidas'.
	].

	(palabra indexOf: aCharacter = 0)ifTrue:[
		(letrasErradas includes: aCharacter )ifFalse:[
			vidasRestantes := vidasRestantes - 1.
		].
		letrasErradas add: aCharacter.
	]
	ifFalse:[
		palabraAAdivinar at: (palabra indexOf: aCharacter) put: aCharacter 
	]

	! !
!AhorcadoGanando methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 17:11:48' prior: 50898094!
initializeParaPalabra: unaPalabra 
	
	palabra := unaPalabra.
	letrasErradas := Set new.
	vidasRestantes := 5.
	palabraAAdivinar := (OrderedCollection newFrom: #($_ $_ $a $_ $_ $_ $_ $_ $_)).! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:12:00'!
ERROR!
!AhorcadoGanando methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 17:12:32' prior: 50898308!
sugerir: aCharacter 

	(vidasRestantes = 0) ifTrue:[
		self error: 'No podes seguir jugando porque te quedaste sin vidas'.
	].

	((palabra indexOf: aCharacter) = 0)ifTrue:[
		(letrasErradas includes: aCharacter )ifFalse:[
			vidasRestantes := vidasRestantes - 1.
		].
		letrasErradas add: aCharacter.
	]
	ifFalse:[
		palabraAAdivinar at: (palabra indexOf: aCharacter) put: aCharacter 
	]

	! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:12:36'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:13:08'!
FAILURE!

ahorcado palabraAAdivinar !
!AhorcadoGanando methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 17:13:52' prior: 50898104!
palabraAAdivinar
	^palabraAAdivinar.! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:13:53'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:13:53'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:13:53'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:13:53'!
FAILURE!
!AhorcadoGanando methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 17:14:36' prior: 50898324!
initializeParaPalabra: unaPalabra 
	
	palabra := unaPalabra.
	letrasErradas := Set new.
	vidasRestantes := 5.
	palabraAAdivinar := OrderedCollection newFrom: #($_ $_ $_ $_ $_ $_ $_ $_ $_).! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:14:39'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:14:39'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:14:39'!
PASSED!

gameView next.!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:14:45'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:14:45'!
PASSED!
!TDDBabyStepsAhorcadoGanandoTest methodsFor: 'tests' stamp: 'fp 12/13/2021 17:14:45' prior: 50898202!
test01PuedoPedirLaPalabraAAdivinar

	| ahorcado |
	ahorcado := Ahorcado paraPalabra: 'starbucks'.
	
	self assert: ahorcado vidasRestantes equals: 5.
	self assert: ahorcado palabraAAdivinar equals: (OrderedCollection newFrom: #($_ $_ $_ $_ $_ $_ $_ $_ $_)).
	self assert: ahorcado letrasErradas equals: Set new.! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:14:45'!
ERROR!

gameView next.!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:14:51'!
ERROR!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:14:51'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:15:00'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:15:00'!
ERROR!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:15:00'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:15:00'!
ERROR!
!TDDBabyStepsAhorcadoGanandoTest methodsFor: 'tests' stamp: 'fp 12/13/2021 17:15:35' prior: 50898416!
test01PuedoPedirLaPalabraAAdivinar

	| ahorcado |
	ahorcado := AhorcadoGanando paraPalabra: 'starbucks'.
	
	self assert: ahorcado vidasRestantes equals: 5.
	self assert: ahorcado palabraAAdivinar equals: (OrderedCollection newFrom: #($_ $_ $_ $_ $_ $_ $_ $_ $_)).
	self assert: ahorcado letrasErradas equals: Set new.! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:15:35'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:15:35'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:15:35'!
PASSED!

gameView next.!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:15:39'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:15:39'!
PASSED!
!TDDBabyStepsAhorcadoGanandoTest methodsFor: 'tests' stamp: 'fp 12/13/2021 17:15:39' prior: 50898216!
test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra

	| ahorcado |
	ahorcado := AhorcadoGanando paraPalabra: 'starbucks'.
	
	ahorcado sugerir: $a.
	
	self assert: ahorcado vidasRestantes equals: 5.
	self assert: ahorcado palabraAAdivinar equals: (OrderedCollection newFrom: #($_ $_ $a $_ $_ $_ $_ $_ $_)).
	self assert: ahorcado letrasErradas equals: Set new.! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:15:39'!
PASSED!

gameView next.!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:15:55'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:15:55'!
PASSED!
!TDDBabyStepsAhorcadoGanandoTest methodsFor: 'tests' stamp: 'fp 12/13/2021 17:15:55'!
test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra

	| ahorcado |
	ahorcado := AhorcadoGanando paraPalabra: 'starbucks'.
	
	ahorcado sugerir: $a.
	ahorcado sugerir: $b.
	
	self assert: ahorcado vidasRestantes equals: 5.
	self assert: ahorcado palabraAAdivinar equals: (OrderedCollection newFrom: #($_ $_ $a $_ $b $_ $_ $_ $_)).
	self assert: ahorcado letrasErradas equals: Set new.! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:15:55'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:16:23'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:16:23'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:16:23'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:16:23'!
PASSED!

gameView next.!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:16:30'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:16:30'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:16:30'!
PASSED!
!TDDBabyStepsAhorcadoGanandoTest methodsFor: 'tests' stamp: 'fp 12/13/2021 17:16:30'!
test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste

	| ahorcado |
	ahorcado := AhorcadoGanando paraPalabra: 'starbucks'.
	
	ahorcado sugerir: $s.
	ahorcado sugerir: $t.
	ahorcado sugerir: $a.
	ahorcado sugerir: $r.
	ahorcado sugerir: $b.
	ahorcado sugerir: $u.
	ahorcado sugerir: $c.
	ahorcado sugerir: $k.
	
	self
		should: [ ahorcado sugerir: $s ]
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: 'No se puede seguir sugiriendo letras porque ganaste'.
		]! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:16:30'!
FAILURE!
!AhorcadoGanando methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 17:19:18' prior: 50898338!
sugerir: aCharacter 

	(vidasRestantes = 0) ifTrue:[
		self error: 'No podes seguir jugando porque te quedaste sin vidas'.
	].
	(palabraAAdivinar includes: $_) ifFalse:[
	 	self error: 'No se puede seguir sugiriendo letras porque ganaste'.
	].

	((palabra indexOf: aCharacter) = 0)ifTrue:[
		(letrasErradas includes: aCharacter )ifFalse:[
			vidasRestantes := vidasRestantes - 1.
		].
		letrasErradas add: aCharacter.
	]
	ifFalse:[
		palabraAAdivinar at: (palabra indexOf: aCharacter) put: aCharacter 
	]

	! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:19:23'!
FAILURE!
!AhorcadoGanando methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 17:20:05' prior: 50898593!
sugerir: aCharacter 

	(vidasRestantes = 0) ifTrue:[
		self error: 'No podes seguir jugando porque te quedaste sin vidas'.
	].


	((palabra indexOf: aCharacter) = 0)ifTrue:[
		(letrasErradas includes: aCharacter )ifFalse:[
			vidasRestantes := vidasRestantes - 1.
		].
		letrasErradas add: aCharacter.
	]
	ifFalse:[
		palabraAAdivinar at: (palabra indexOf: aCharacter) put: aCharacter 
	].

	(palabraAAdivinar includes: $_) ifFalse:[
	 	self error: 'No se puede seguir sugiriendo letras porque ganaste'.
	].
	! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:20:07'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:21:44'!
FAILURE!
!TDDBabyStepsAhorcadoGanandoTest methodsFor: 'tests' stamp: 'fp 12/13/2021 17:22:28' prior: 50898569!
test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste

	| ahorcado |
	ahorcado := AhorcadoGanando paraPalabra: 'starbucks'.
	
	ahorcado sugerir: $s.
	ahorcado sugerir: $t.
	ahorcado sugerir: $a.
	ahorcado sugerir: $r.
	ahorcado sugerir: $b.
	ahorcado sugerir: $u.
	ahorcado sugerir: $c.
	ahorcado sugerir: $k.
	ahorcado sugerir: $s.
	
	self
		should: [ ahorcado sugerir: $s ]
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: 'No se puede seguir sugiriendo letras porque ganaste'.
		]! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:22:35'!
FAILURE!

(OrderedCollection newFrom: #($_ $_ $_ $_ $_ $_ $_ $_ $_)) includes: $_.!

(OrderedCollection newFrom: #($a $a $a)) includes: $_.!

(OrderedCollection newFrom: #($a $a $a)) includes: $_. !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:34:37'!
FAILURE!
!AhorcadoGanando methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 17:39:34' prior: 50898617!
sugerir: aCharacter 

	(vidasRestantes = 0) ifTrue:[
		self error: 'No podes seguir jugando porque te quedaste sin vidas'.
	].


	((palabra indexOf: aCharacter) = 0)ifTrue:[
		(letrasErradas includes: aCharacter )ifFalse:[
			vidasRestantes := vidasRestantes - 1.
		].
		letrasErradas add: aCharacter.
	]
	ifFalse:[
		palabraAAdivinar at: (palabra indexOf: aCharacter) put: aCharacter .
		palabra at: (palabra indexOf: aCharacter) put: $_ 
	].

	(palabraAAdivinar includes: $_) ifFalse:[
	 	self error: 'No se puede seguir sugiriendo letras porque ganaste'.
	].
	! !
!AhorcadoGanando methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 17:39:38' prior: 50898679!
sugerir: aCharacter 

	(vidasRestantes = 0) ifTrue:[
		self error: 'No podes seguir jugando porque te quedaste sin vidas'.
	].


	((palabra indexOf: aCharacter) = 0)ifTrue:[
		(letrasErradas includes: aCharacter )ifFalse:[
			vidasRestantes := vidasRestantes - 1.
		].
		letrasErradas add: aCharacter.
	]
	ifFalse:[
		palabraAAdivinar at: (palabra indexOf: aCharacter) put: aCharacter .
		palabra at: (palabra indexOf: aCharacter) put: $_. 
	].

	(palabraAAdivinar includes: $_) ifFalse:[
	 	self error: 'No se puede seguir sugiriendo letras porque ganaste'.
	].
	! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:39:40'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:39:40'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:39:40'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:39:40'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:39:40'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:39:40'!
ERROR!
!TDDBabyStepsAhorcadoGanandoTest methodsFor: 'tests' stamp: 'fp 12/13/2021 17:39:50' prior: 50898645!
test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste

	| ahorcado |
	ahorcado := AhorcadoGanando paraPalabra: 'starbucks'.
	
	ahorcado sugerir: $s.
	ahorcado sugerir: $t.
	ahorcado sugerir: $a.
	ahorcado sugerir: $r.
	ahorcado sugerir: $b.
	ahorcado sugerir: $u.
	ahorcado sugerir: $c.
	ahorcado sugerir: $k.
	
	self
		should: [ ahorcado sugerir: $s ]
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText equals: 'No se puede seguir sugiriendo letras porque ganaste'.
		]! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:39:51'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:39:51'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:39:51'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:39:51'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:39:51'!
ERROR!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:40:05'!
ERROR!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:40:55'!
FAILURE!
!AhorcadoGanando methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 17:42:29' prior: 50898700!
sugerir: aCharacter 

	(vidasRestantes = 0) ifTrue:[
		self error: 'No podes seguir jugando porque te quedaste sin vidas'.
	].


	((palabra indexOf: aCharacter) = 0)
	ifTrue:[
		(letrasErradas includes: aCharacter )ifFalse:[
			vidasRestantes := vidasRestantes - 1.
		].
		letrasErradas add: aCharacter.
	]
	ifFalse:[
		palabraAAdivinar at: (palabra indexOf: aCharacter) put: aCharacter.
		palabra at: (palabra indexOf: aCharacter) put: $_. 
	].

	(palabraAAdivinar includes: $_) ifFalse:[
	 	self error: 'No se puede seguir sugiriendo letras porque ganaste'.
	].
	! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:42:37'!
ERROR!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:42:52'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:42:52'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:42:52'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:42:52'!
ERROR!
!AhorcadoGanando methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 17:43:03' prior: 50898796!
sugerir: aCharacter 

	(vidasRestantes = 0) ifTrue:[
		self error: 'No podes seguir jugando porque te quedaste sin vidas'.
	].


	((palabra indexOf: aCharacter) = 0)
	ifTrue:[
		(letrasErradas includes: aCharacter )ifFalse:[
			vidasRestantes := vidasRestantes - 1.
		].
		letrasErradas add: aCharacter.
	]
	ifFalse:[
		palabraAAdivinar at: (palabra indexOf: aCharacter) put: aCharacter.

	].

	(palabraAAdivinar includes: $_) ifFalse:[
	 	self error: 'No se puede seguir sugiriendo letras porque ganaste'.
	].
	! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:43:06'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:43:06'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:43:06'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:43:06'!
ERROR!
!AhorcadoGanando methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 17:43:18' prior: 50898838!
sugerir: aCharacter 

	(vidasRestantes = 0) ifTrue:[
		self error: 'No podes seguir jugando porque te quedaste sin vidas'.
	].


	((palabra indexOf: aCharacter) = 0)
	ifTrue:[
		(letrasErradas includes: aCharacter )ifFalse:[
			vidasRestantes := vidasRestantes - 1.
		].
		letrasErradas add: aCharacter.
	]
	ifFalse:[
		palabraAAdivinar at: (palabra indexOf: aCharacter) put: aCharacter.
		palabra at: (palabra indexOf: aCharacter) put: $_. 
	].

	(palabraAAdivinar includes: $_) ifFalse:[
	 	self error: 'No se puede seguir sugiriendo letras porque ganaste'.
	].
	! !
!AhorcadoGanando methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 17:39:34' prior: 50898875!
sugerir: aCharacter 

	(vidasRestantes = 0) ifTrue:[
		self error: 'No podes seguir jugando porque te quedaste sin vidas'.
	].


	((palabra indexOf: aCharacter) = 0)ifTrue:[
		(letrasErradas includes: aCharacter )ifFalse:[
			vidasRestantes := vidasRestantes - 1.
		].
		letrasErradas add: aCharacter.
	]
	ifFalse:[
		palabraAAdivinar at: (palabra indexOf: aCharacter) put: aCharacter .
		palabra at: (palabra indexOf: aCharacter) put: $_ 
	].

	(palabraAAdivinar includes: $_) ifFalse:[
	 	self error: 'No se puede seguir sugiriendo letras porque ganaste'.
	].
	! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:46:13'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:46:13'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:46:13'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:46:13'!
ERROR!
!AhorcadoGanando methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 17:20:05' prior: 50898896!
sugerir: aCharacter 

	(vidasRestantes = 0) ifTrue:[
		self error: 'No podes seguir jugando porque te quedaste sin vidas'.
	].


	((palabra indexOf: aCharacter) = 0)ifTrue:[
		(letrasErradas includes: aCharacter )ifFalse:[
			vidasRestantes := vidasRestantes - 1.
		].
		letrasErradas add: aCharacter.
	]
	ifFalse:[
		palabraAAdivinar at: (palabra indexOf: aCharacter) put: aCharacter 
	].

	(palabraAAdivinar includes: $_) ifFalse:[
	 	self error: 'No se puede seguir sugiriendo letras porque ganaste'.
	].
	! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:46:38'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:46:38'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:46:38'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:46:38'!
ERROR!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:46:46'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:46:46'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:46:46'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:46:46'!
ERROR!
!AhorcadoGanando methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 17:47:51' prior: 50898934!
sugerir: aCharacter 

	(vidasRestantes = 0) ifTrue:[
		self error: 'No podes seguir jugando porque te quedaste sin vidas'.
	].


	((palabra indexOf: aCharacter) = 0)
	ifTrue:[
		(letrasErradas includes: aCharacter )ifFalse:[
			vidasRestantes := vidasRestantes - 1.
		].
		letrasErradas add: aCharacter.
	]
	ifFalse:[
		palabraAAdivinar at: (palabra indexOf: aCharacter) put: aCharacter 
	].

	(palabraAAdivinar includes: $_) ifFalse:[
	 	self error: 'No se puede seguir sugiriendo letras porque ganaste'.
	].
	! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:47:52'!
ERROR!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:51:25'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:51:25'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:51:25'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:51:25'!
ERROR!

gameView next.!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:51:51'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:51:51'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:51:51'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:51:51'!
ERROR!

gameView next.!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:51:57'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:51:57'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:51:57'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:51:57'!
ERROR!

gameView next.!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:52:14'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:52:14'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:52:14'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:52:14'!
ERROR!

gameView next.!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:52:17'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:52:17'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:52:17'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:52:17'!
ERROR!

gameView next.!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:52:18'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:52:18'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:52:18'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:52:18'!
ERROR!

game := TDDBabyStepsGameAhorcadoGanando new.
game definition.
gameView := game start.
gameView next.
!

!classDefinition: #TDDBabyStepsAhorcadoGanandoTest category: 'TDDBabyStepsGameAhorcadoGanando' stamp: 'fp 12/13/2021 17:52:21'!
TestCase subclass: #TDDBabyStepsAhorcadoGanandoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoGanando'!

!classDefinition: #AhorcadoGanando category: 'TDDBabyStepsGameAhorcadoGanando' stamp: 'fp 12/13/2021 17:52:21'!
TestCase subclass: #AhorcadoGanando
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoGanando'!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:52:21'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:52:21'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:52:21'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:52:21'!
ERROR!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:52:31'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:52:31'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:52:31'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:52:31'!
ERROR!

!classDefinition: #AhorcadoGanando category: 'TDDBabyStepsGameAhorcadoGanando' stamp: 'fp 12/13/2021 17:52:58'!
TestCase subclass: #AhorcadoGanando
	instanceVariableNames: 'palabra'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoGanando'!

!classDefinition: #AhorcadoGanando category: 'TDDBabyStepsGameAhorcadoGanando' stamp: 'fp 12/13/2021 17:53:00'!
TestCase subclass: #AhorcadoGanando
	instanceVariableNames: 'palabra letrasErradas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoGanando'!

!classDefinition: #AhorcadoGanando category: 'TDDBabyStepsGameAhorcadoGanando' stamp: 'fp 12/13/2021 17:53:01'!
TestCase subclass: #AhorcadoGanando
	instanceVariableNames: 'palabra letrasErradas vidasRestantes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoGanando'!

!classDefinition: #AhorcadoGanando category: 'TDDBabyStepsGameAhorcadoGanando' stamp: 'fp 12/13/2021 17:53:02'!
TestCase subclass: #AhorcadoGanando
	instanceVariableNames: 'palabra letrasErradas vidasRestantes palabraAAdivinar'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoGanando'!
!AhorcadoGanando methodsFor: '*Aconcagua-Extensions' stamp: 'fp 12/13/2021 17:52:55' prior: 50898385!
initializeParaPalabra: unaPalabra 
	
	palabra := unaPalabra.
	letrasErradas := Set new.
	vidasRestantes := 5.
	palabraAAdivinar := OrderedCollection newFrom: #($_ $_ $_ $_ $_ $_ $_ $_ $_).! !

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test01PuedoPedirLaPalabraAAdivinar stamp: 'fp 12/13/2021 17:53:09'!
PASSED!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test02AdivinarUnaLetraDevelaSuOcurrenciaEnLaPalabra stamp: 'fp 12/13/2021 17:53:09'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test03AdivinarMasUnaLetraDevelaSusOcurrenciasEnLaPalabra stamp: 'fp 12/13/2021 17:53:09'!
FAILURE!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:53:09'!
ERROR!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:53:27'!
ERROR!

!testRun: #TDDBabyStepsAhorcadoGanandoTest #test04NoSePuedeSeguirSugiriendoLetrasSiYaGanaste stamp: 'fp 12/13/2021 17:53:27'!
ERROR!

starbucks!

'starbucks'!

!classRemoval: #TDDBabyStepsAhorcadoGanandoTest stamp: 'fp 12/13/2021 17:55:14'!
TestCase subclass: #TDDBabyStepsAhorcadoGanandoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoGanando'!

!classRemoval: #AhorcadoGanando stamp: 'fp 12/13/2021 17:55:14'!
TestCase subclass: #AhorcadoGanando
	instanceVariableNames: 'palabra letrasErradas vidasRestantes palabraAAdivinar'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAhorcadoGanando'!

gameView next.!

game := TDDBabyStepsGameCalendar new.
game definition.
gameView := game start.
gameView next.!

!classDefinition: #TDDBabyStepsCalendarTest category: 'TDDBabyStepsGameCalendar' stamp: 'fp 12/13/2021 17:59:14'!
TestCase subclass: #TDDBabyStepsCalendarTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameCalendar'!
!TDDBabyStepsCalendarTest methodsFor: 'tests' stamp: 'fp 12/13/2021 17:59:15'!
test01CalendarWithoutEventsIsFreeAtAnyMoment
	
	| calendar |
	calendar := Calendar new.
	
	self assert: (calendar isFreeAt: October/20/2021 from: 10:00 to: 11:00)
	! !

!testRun: #TDDBabyStepsCalendarTest #test01CalendarWithoutEventsIsFreeAtAnyMoment stamp: 'fp 12/13/2021 17:59:15'!
ERROR!

!testRun: #TDDBabyStepsCalendarTest #test01CalendarWithoutEventsIsFreeAtAnyMoment stamp: 'fp 12/13/2021 18:00:34'!
ERROR!

Object subclass: #Calendar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameCalendar'!

!classDefinition: #Calendar category: 'TDDBabyStepsGameCalendar' stamp: 'fp 12/13/2021 18:00:52'!
Object subclass: #Calendar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameCalendar'!
!Calendar methodsFor: 'no messages' stamp: 'fp 12/13/2021 18:02:00'!
isFreeAt: aDay from: anHour1 to: anHour2

	^true! !

!testRun: #TDDBabyStepsCalendarTest #test01CalendarWithoutEventsIsFreeAtAnyMoment stamp: 'fp 12/13/2021 18:02:06'!
PASSED!

!testRun: #TDDBabyStepsCalendarTest #test01CalendarWithoutEventsIsFreeAtAnyMoment stamp: 'fp 12/13/2021 18:02:06'!
PASSED!

gameView next.!

!testRun: #TDDBabyStepsCalendarTest #test01CalendarWithoutEventsIsFreeAtAnyMoment stamp: 'fp 12/13/2021 18:02:09'!
PASSED!
!TDDBabyStepsCalendarTest methodsFor: 'tests' stamp: 'fp 12/13/2021 18:02:09'!
test02CalendarIsNotFreeForSameDateAndTimeAsAnOneTimeEvent
	
	| calendar |
	calendar := Calendar new.
	calendar addOneTimeEventAt: October/30/2021 from: 13:00 to: 15:00.
	
	self deny: (calendar isFreeAt: October/30/2021 from: 13:00 to: 15:00)
	! !

!testRun: #TDDBabyStepsCalendarTest #test02CalendarIsNotFreeForSameDateAndTimeAsAnOneTimeEvent stamp: 'fp 12/13/2021 18:02:09'!
ERROR!

Date new!

Interval from: 13:00 to: 15:00. !

Date starting: October/30/2021 ending: October/31/2021.!

October/30/2021 starting: 13:00 ending: 15:00.!

----QUIT----(13 December 2021 18:06:52) CuisUniversity-4532.image priorSource: 18107347!

----STARTUP---- (13 December 2021 19:47:03) as /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/Smalltalk-Cuis/CuisUniversity-4532.image!


----End fileIn of /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/grupo/ServiciosFinancieros-Ejercicio2.st----!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 12/13/2021 21:32:45'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 12/13/2021 21:32:45'!
ERROR!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 12/13/2021 21:32:45'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 12/13/2021 21:32:45'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 12/13/2021 21:32:45'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 12/13/2021 21:32:45'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 12/13/2021 21:32:45'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 12/13/2021 21:32:45'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 12/13/2021 21:32:45'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 12/13/2021 21:32:45'!
ERROR!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 12/13/2021 21:32:45'!
ERROR!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 12/13/2021 21:32:45'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeCreatedWithAName stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountCanBeCreatedWithAName stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test01AccountWithoutTransactionsItsSummaryIsEmpty stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test02AccountWithOneDepositTransacrtionSummaryReturnsTransactionAndBalance stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test03AccountWithOneWithdrawTransacrtionSummaryReturnsTransactionAndBalance stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test04AccountWithOneTransferDepositLegTransactionSummaryReturnsTransactionAndBalance stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test05AccountWithOneTransferWithdrawLegTransactionSummaryReturnsTransactionAndBalance stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test06AccountWithMultipleTransactionSummaryReturnsTransactionsAndBalance stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test07AccountWithoutTransfersHasZeroAsTransferNet stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test08AccountWithATransferDepositsHasItsValueAsTransferNet stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test09AccountWithATransferWithdrawaltsHasItsValueAsTransferNet stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test10AccountWithMultipleTransfersHasATransferNet stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test11WhenPortfolioHasNoChildAccountsAndNoNamePortfolioTreePrinterReturnsDefaultName stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test12WhenPortfolioHasNoChildAccountsPortfolioTreePrinterReturnsOnlyItsName stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test13WhenPortfolioHasOneAccountNamedAndOneUnnamedPortfolioTreePrinterReturnsTheirNames stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test14WhenPortfolioHasOnePortfoliPortfolioTreePrinterReturnsItsNamesWithATreeStructure stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test15PortfolioTreeIsRenderedProperlyByPortfolioTreePrinter stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test16WhenPortfolioIsEmptyPortfolioDetailedTreeReturnNameAndBalance stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test17WhenPortfolioHasOneAccountPortfolioDetailedTreePrinterReturnsNameAccountSummaryAndBalance stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test18WhenPortfolioHasMultipleReceptiveAccountSPortfolioDetailedTreePrinterReturnsNameAccountSummaryAndBalance stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test19WhenPortfolioHasOnePortfolioPortfolioDetailedTreePrinterReturnsTheirNamesAndBalance stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test20AccountSummaryCantRecieveAPortfolio stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test21PortfolioTreePrinterCantRecieveAReceptiveAccount stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test22PortfolioDetailedTreePrinterCantRecieveAReceptiveAccount stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test23WhenPortfolioHasOnePortfolioWithAccountsPortfolioDetailedTreePrinterReturnsTheirNamesTheAccountSummaryAndBalance stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #ReportTest #test24WhenPortfolioHasOnePortfolioWithAnotherPortfolioWithAccountsPortfolioDetailedTreePrinterReturnsTheirNamesTheAccountSummaryAndBalance stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #TransferTest #test01ATransferDecreasesBalanceFromOriginAccountAndIncreasesItForDestinationAccount stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #TransferTest #test01OnTransferDestinationAccountBalanceIncreasesAndOriginAccountBalanceDecreases stamp: 'fp 12/13/2021 21:32:45'!
ERROR!

!testRun: #TransferTest #test02ATransferKnowsItsValue stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #TransferTest #test03DepositLegKnowsItsWithdrawCounterpart stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #TransferTest #test04WithdrawLegKnowsItsDepositCounterpart stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #TransferTest #test05CannotTransferZero stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #TransferTest #test05OriginAndDestinationAccountsCannotBeTheSame stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!testRun: #TransferTest #test06CannotTransferAZeroAmount stamp: 'fp 12/13/2021 21:32:45'!
PASSED!

!classDefinition: #ReceptiveAccount category: 'ServiciosFinancieros-Ejercicio2' stamp: 'fp 12/13/2021 21:33:02'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #PortfolioTest #test01EmptyPortfolioHasBalanceOfZero stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #PortfolioTest #test02WhenPorfolioHasOneAccountBothBalanceAreTheSame stamp: 'fp 12/13/2021 21:33:36'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #PortfolioTest #test03WhenPorfolioHasMoreThanOneAccountTheBalanceIsTheSumOfTheBalances stamp: 'fp 12/13/2021 21:33:36'!
ERROR!

!testRun: #PortfolioTest #test04ATransactionRegisteredOnAnAccountInPortfolioIsFound stamp: 'fp 12/13/2021 21:33:36'!
ERROR!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioCantFindTransactionNotRegistered stamp: 'fp 12/13/2021 21:33:36'!
ERROR!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioCanReturnAllItsTransactionsWhenHasOneAccount stamp: 'fp 12/13/2021 21:33:36'!
ERROR!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioCanReturnAllItsTransactionsWhenHasTwoAccount stamp: 'fp 12/13/2021 21:33:36'!
ERROR!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #PortfolioTest #test08PortofioCantAddSameAccountTwice stamp: 'fp 12/13/2021 21:33:36'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioCantAddAnAccountRegisteredOnOneOdItsPortfolios stamp: 'fp 12/13/2021 21:33:36'!
ERROR!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanAddMoreThanOnePorfolio stamp: 'fp 12/13/2021 21:33:36'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCantIncludeItSelf stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCantAddPortfolioThatIncludesAnyOfItsAccounts stamp: 'fp 12/13/2021 21:33:36'!
ERROR!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCantAddAccountIfItsParentsHaveIt stamp: 'fp 12/13/2021 21:33:36'!
ERROR!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #PortfolioTest #test14PortfolioCantAddAccountIfItsGrandparentHaveIt stamp: 'fp 12/13/2021 21:33:36'!
ERROR!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeCreatedWithAName stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountCanBeCreatedWithAName stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test01AccountWithoutTransactionsItsSummaryIsEmpty stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test02AccountWithOneDepositTransacrtionSummaryReturnsTransactionAndBalance stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test03AccountWithOneWithdrawTransacrtionSummaryReturnsTransactionAndBalance stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test04AccountWithOneTransferDepositLegTransactionSummaryReturnsTransactionAndBalance stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test05AccountWithOneTransferWithdrawLegTransactionSummaryReturnsTransactionAndBalance stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test06AccountWithMultipleTransactionSummaryReturnsTransactionsAndBalance stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test07AccountWithoutTransfersHasZeroAsTransferNet stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test08AccountWithATransferDepositsHasItsValueAsTransferNet stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test09AccountWithATransferWithdrawaltsHasItsValueAsTransferNet stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test10AccountWithMultipleTransfersHasATransferNet stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test11WhenPortfolioHasNoChildAccountsAndNoNamePortfolioTreePrinterReturnsDefaultName stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test12WhenPortfolioHasNoChildAccountsPortfolioTreePrinterReturnsOnlyItsName stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test13WhenPortfolioHasOneAccountNamedAndOneUnnamedPortfolioTreePrinterReturnsTheirNames stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test14WhenPortfolioHasOnePortfoliPortfolioTreePrinterReturnsItsNamesWithATreeStructure stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test15PortfolioTreeIsRenderedProperlyByPortfolioTreePrinter stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test16WhenPortfolioIsEmptyPortfolioDetailedTreeReturnNameAndBalance stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test17WhenPortfolioHasOneAccountPortfolioDetailedTreePrinterReturnsNameAccountSummaryAndBalance stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test18WhenPortfolioHasMultipleReceptiveAccountSPortfolioDetailedTreePrinterReturnsNameAccountSummaryAndBalance stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test19WhenPortfolioHasOnePortfolioPortfolioDetailedTreePrinterReturnsTheirNamesAndBalance stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test20AccountSummaryCantRecieveAPortfolio stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test21PortfolioTreePrinterCantRecieveAReceptiveAccount stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test22PortfolioDetailedTreePrinterCantRecieveAReceptiveAccount stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test23WhenPortfolioHasOnePortfolioWithAccountsPortfolioDetailedTreePrinterReturnsTheirNamesTheAccountSummaryAndBalance stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #ReportTest #test24WhenPortfolioHasOnePortfolioWithAnotherPortfolioWithAccountsPortfolioDetailedTreePrinterReturnsTheirNamesTheAccountSummaryAndBalance stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #TransferTest #test01ATransferDecreasesBalanceFromOriginAccountAndIncreasesItForDestinationAccount stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #TransferTest #test01OnTransferDestinationAccountBalanceIncreasesAndOriginAccountBalanceDecreases stamp: 'fp 12/13/2021 21:33:36'!
ERROR!

!testRun: #TransferTest #test02ATransferKnowsItsValue stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #TransferTest #test02CannotTransferNegativeAmount stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #TransferTest #test03DepositLegKnowsItsWithdrawCounterpart stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #TransferTest #test03EachLegAnswersItsCounterparty stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #TransferTest #test04TransferenceCanAnswerItsValue stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #TransferTest #test04WithdrawLegKnowsItsDepositCounterpart stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #TransferTest #test05CannotTransferZero stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #TransferTest #test05OriginAndDestinationAccountsCannotBeTheSame stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!testRun: #TransferTest #test06CannotTransferAZeroAmount stamp: 'fp 12/13/2021 21:33:36'!
PASSED!

!classRemoval: #Transfer stamp: 'fp 12/13/2021 22:31:03'!
Object subclass: #Transfer
	instanceVariableNames: 'value withdrawLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #TransferNet stamp: 'fp 12/13/2021 22:31:04'!
Report subclass: #TransferNet
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #PortfolioTreePrinter stamp: 'fp 12/13/2021 22:31:05'!
Report subclass: #PortfolioTreePrinter
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #PortfolioDetailedTreePrinter stamp: 'fp 12/13/2021 22:31:06'!
Report subclass: #PortfolioDetailedTreePrinter
	instanceVariableNames: 'account report'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #AccountSummary stamp: 'fp 12/13/2021 22:31:07'!
Report subclass: #AccountSummary
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #Report stamp: 'fp 12/13/2021 22:31:08'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #Withdraw stamp: 'fp 12/13/2021 22:31:09'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #TransferWithdrawLeg stamp: 'fp 12/13/2021 22:31:10'!
TransferLeg subclass: #TransferWithdrawLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #TransferDepositLeg stamp: 'fp 12/13/2021 22:31:11'!
TransferLeg subclass: #TransferDepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #TransferLeg stamp: 'fp 12/13/2021 22:31:12'!
AccountTransaction subclass: #TransferLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #Deposit stamp: 'fp 12/13/2021 22:31:13'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #AccountTransaction stamp: 'fp 12/13/2021 22:31:14'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #ReceptiveAccount stamp: 'fp 12/13/2021 22:31:15'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #Portfolio stamp: 'fp 12/13/2021 22:31:16'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #Account stamp: 'fp 12/13/2021 22:31:17'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #TransferTest stamp: 'fp 12/13/2021 22:31:18'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #ReportTest stamp: 'fp 12/13/2021 22:31:19'!
TestCase subclass: #ReportTest
	instanceVariableNames: 'myAccount johnsAccount emptyPortfolio portfolioWithTwoAccounts emptyNamedPortfolio portfolioWithPortfolio portfolioWithPortfolioWithPortfolio angiesAccount portfolioWithAccount portfolioWithEmptyPortfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #ReceptiveAccountTest stamp: 'fp 12/13/2021 22:31:20'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

!classRemoval: #PortfolioTest stamp: 'fp 12/13/2021 22:31:21'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Ejercicio2'!

----End fileIn of /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/grupo/ServiciosFinancieros-Ejercicio2.st----!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithOneAccountIsAccountBalance stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioCanBeCreatedWithAName stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountCanBeCreatedWithAName stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test01AccountWithoutTransactionsItsSummaryIsEmpty stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test02AccountWithOneDepositTransacrtionSummaryReturnsTransactionAndBalance stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test03AccountWithOneWithdrawTransacrtionSummaryReturnsTransactionAndBalance stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test04AccountWithOneTransferDepositLegTransactionSummaryReturnsTransactionAndBalance stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test05AccountWithOneTransferWithdrawLegTransactionSummaryReturnsTransactionAndBalance stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test06AccountWithMultipleTransactionSummaryReturnsTransactionsAndBalance stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test07AccountWithoutTransfersHasZeroAsTransferNet stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test08AccountWithATransferDepositsHasItsValueAsTransferNet stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test09AccountWithATransferWithdrawaltsHasItsValueAsTransferNet stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test10AccountWithMultipleTransfersHasATransferNet stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test11WhenPortfolioHasNoChildAccountsAndNoNamePortfolioTreePrinterReturnsDefaultName stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test12WhenPortfolioHasNoChildAccountsPortfolioTreePrinterReturnsOnlyItsName stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test13WhenPortfolioHasOneAccountNamedAndOneUnnamedPortfolioTreePrinterReturnsTheirNames stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test14WhenPortfolioHasOnePortfoliPortfolioTreePrinterReturnsItsNamesWithATreeStructure stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test15PortfolioTreeIsRenderedProperlyByPortfolioTreePrinter stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test16WhenPortfolioIsEmptyPortfolioDetailedTreeReturnNameAndBalance stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test17WhenPortfolioHasOneAccountPortfolioDetailedTreePrinterReturnsNameAccountSummaryAndBalance stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test18WhenPortfolioHasMultipleReceptiveAccountSPortfolioDetailedTreePrinterReturnsNameAccountSummaryAndBalance stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test19WhenPortfolioHasOnePortfolioPortfolioDetailedTreePrinterReturnsTheirNamesAndBalance stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test20AccountSummaryCantRecieveAPortfolio stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test21PortfolioTreePrinterCantRecieveAReceptiveAccount stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test22PortfolioDetailedTreePrinterCantRecieveAReceptiveAccount stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test23WhenPortfolioHasOnePortfolioWithAccountsPortfolioDetailedTreePrinterReturnsTheirNamesTheAccountSummaryAndBalance stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #ReportTest #test24WhenPortfolioHasOnePortfolioWithAnotherPortfolioWithAccountsPortfolioDetailedTreePrinterReturnsTheirNamesTheAccountSummaryAndBalance stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #TransferTest #test01ATransferDecreasesBalanceFromOriginAccountAndIncreasesItForDestinationAccount stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #TransferTest #test02ATransferKnowsItsValue stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #TransferTest #test03DepositLegKnowsItsWithdrawCounterpart stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #TransferTest #test04WithdrawLegKnowsItsDepositCounterpart stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #TransferTest #test05OriginAndDestinationAccountsCannotBeTheSame stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

!testRun: #TransferTest #test06CannotTransferAZeroAmount stamp: 'fp 12/13/2021 22:31:54'!
PASSED!

----End fileIn of /home/facupri/Documentos/Facultad/algoritmos_programacion_III_leveroni/grupo/practica_parcial/AlgoIII-Factorio-2021-1C.st----!